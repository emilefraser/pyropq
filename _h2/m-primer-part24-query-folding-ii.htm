<!DOCTYPE html>
<!--[if IE 7]>
<html class="ie ie7" lang="en-US">
<![endif]-->
<!--[if IE 8]>
<html class="ie ie8" lang="en-US">
<![endif]-->
<!--[if !(IE 7) & !(IE 8)]><!-->
<html lang="en-US">
<!--<![endif]-->
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>Power Query M Primer (Part 24): Query Folding II | Ben Gribaudo</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="https://bengribaudo.com/xmlrpc.php" />
<!--[if lt IE 9]>
<script src="https://bengribaudo.com/wp-content/themes/twentytwelve/js/html5.js" type="text/javascript"></script>
<![endif]-->
<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="Ben Gribaudo &raquo; Feed" href="https://bengribaudo.com/feed" />
<link rel="alternate" type="application/rss+xml" title="Ben Gribaudo &raquo; Comments Feed" href="https://bengribaudo.com/comments/feed" />
<link rel="alternate" type="application/rss+xml" title="Ben Gribaudo &raquo; Power Query M Primer (Part 24): Query Folding II Comments Feed" href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii/feed" />
<script type="text/javascript">
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/bengribaudo.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.2.2"}};
/*! This file is auto-generated */
!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){p.clearRect(0,0,i.width,i.height),p.fillText(e,0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(t,0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(p&&p.fillText)switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s("\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!s("\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!s("\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!s("\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udfff","\ud83e\udef1\ud83c\udffb\u200b\ud83e\udef2\ud83c\udfff")}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(e=t.source||{}).concatemoji?c(e.concatemoji):e.wpemoji&&e.twemoji&&(c(e.twemoji),c(e.wpemoji)))}(window,document,window._wpemojiSettings);
</script>
<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 0.07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css' href='https://bengribaudo.com/wp-content/plugins/gutenberg/build/block-library/style.css?ver=16.5.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-block-library-theme-css' href='https://bengribaudo.com/wp-content/plugins/gutenberg/build/block-library/theme.css?ver=16.5.0' type='text/css' media='all' />
<link rel='stylesheet' id='classic-theme-styles-css' href='https://bengribaudo.com/wp-includes/css/classic-themes.min.css?ver=6.2.2' type='text/css' media='all' />
<style id='global-styles-inline-css' type='text/css'>
body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #fff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--blue: #21759b;--wp--preset--color--dark-gray: #444;--wp--preset--color--medium-gray: #9f9f9f;--wp--preset--color--light-gray: #e6e6e6;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
.wp-block-pullquote{font-size: 1.5em;line-height: 1.6;}
.wp-block-navigation a:where(:not(.wp-element-button)){color: inherit;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
</style>
<link rel='stylesheet' id='parent-style-css' href='https://bengribaudo.com/wp-content/themes/twentytwelve/style.css?ver=6.2.2' type='text/css' media='all' />
<link rel='stylesheet' id='additional-google-fonts-css' href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed%3A300%2C300i%2C700%7COswald%3A400%2C500%2C700%7CBad+Script&#038;ver=6.2.2' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-fonts-css' href='https://fonts.googleapis.com/css?family=Open+Sans%3A400italic%2C700italic%2C400%2C700&#038;subset=latin%2Clatin-ext&#038;display=fallback' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-style-css' href='https://bengribaudo.com/wp-content/themes/twentytwelve-child/style.css?ver=20221101' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-block-style-css' href='https://bengribaudo.com/wp-content/themes/twentytwelve/css/blocks.css?ver=20190406' type='text/css' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='twentytwelve-ie-css' href='https://bengribaudo.com/wp-content/themes/twentytwelve/css/ie.css?ver=20150214' type='text/css' media='all' />
<![endif]-->
<script type='text/javascript' src='https://bengribaudo.com/wp-includes/js/jquery/jquery.min.js?ver=3.6.4' id='jquery-core-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.0' id='jquery-migrate-js'></script>
<link rel="https://api.w.org/" href="https://bengribaudo.com/wp-json/" /><link rel="alternate" type="application/json" href="https://bengribaudo.com/wp-json/wp/v2/posts/6620" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://bengribaudo.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://bengribaudo.com/wp-includes/wlwmanifest.xml" />
<meta name="generator" content="WordPress 6.2.2" />
<link rel="canonical" href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii" />
<link rel='shortlink' href='https://bengribaudo.com/?p=6620' />
<link rel="alternate" type="application/json+oembed" href="https://bengribaudo.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fbengribaudo.com%2Fblog%2F2022%2F03%2F21%2F6620%2Fpower-query-m-primer-part24-query-folding-ii" />
<link rel="alternate" type="text/xml+oembed" href="https://bengribaudo.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fbengribaudo.com%2Fblog%2F2022%2F03%2F21%2F6620%2Fpower-query-m-primer-part24-query-folding-ii&#038;format=xml" />
</head>

<body class="post-template-default single single-post postid-6620 single-format-standard wp-embed-responsive custom-font-enabled single-author">
<div id="page" class="hfeed site">
	<header id="masthead" class="site-header" role="banner">
		<a href="https://bengribaudo.com/" title="Ben Gribaudo (home)"  rel="home"><img id="site-logo" src="https://bengribaudo.com/wp-content/themes/twentytwelve-child/images/Logo.png" width="288" height="74" alt="Ben Gribaudo - Solutions Engineer, Senior Developer &amp; Database Engineer" /></a>

		<nav id="site-navigation" class="main-navigation" role="navigation">
			<button class="menu-toggle">Menu</button>
			<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>
			<div class="menu-main-navigation-container"><ul id="menu-main-navigation" class="nav-menu"><li id="menu-item-2431" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-2431"><a href="https://bengribaudo.com/">Home/Blog</a></li>
<li id="menu-item-3761" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-3761"><a href="https://bengribaudo.com/consulting">Consulting</a>
<ul class="sub-menu">
	<li id="menu-item-6440" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6440"><a href="https://bengribaudo.com/consulting/architecture-review">Architecture Review</a></li>
	<li id="menu-item-6362" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6362"><a href="https://bengribaudo.com/consulting/power-query">Power Query</a></li>
	<li id="menu-item-6934" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6934"><a href="https://bengribaudo.com/consulting/power-query-custom-connectors">Power Query Custom Connectors</a></li>
	<li id="menu-item-5777" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5777"><a href="https://bengribaudo.com/consulting/microsoft-power-bi">Microsoft Power BI</a></li>
</ul>
</li>
<li id="menu-item-6286" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-6286"><a href="https://bengribaudo.com/courses">Courses/Training</a>
<ul class="sub-menu">
	<li id="menu-item-6287" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6287"><a href="https://bengribaudo.com/courses/mastering-m">Mastering M: A Deep Dive Into the Language That Powers Power Query (live web course)</a></li>
	<li id="menu-item-7349" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7349"><a href="https://bengribaudo.com/courses/power-query-custom-connector-workshop">Power Query Custom Connector Deep Dive Workshop</a></li>
	<li id="menu-item-6348" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6348"><a href="https://bengribaudo.com/courses/custom-training">Custom Training/Mentoring</a></li>
</ul>
</li>
<li id="menu-item-6686" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6686"><a href="https://bengribaudo.com/power-query-m-primer">Power Query M Primer</a></li>
<li id="menu-item-5398" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-5398"><a href="https://bengribaudo.com/tools">Tools</a>
<ul class="sub-menu">
	<li id="menu-item-5399" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5399"><a href="https://bengribaudo.com/tools/datamashupexplorer">Data Mashup Explorer</a></li>
	<li id="menu-item-5401" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5401"><a href="https://bengribaudo.com/tools/datamashupcmdlets">Data Mashup Cmdlets</a></li>
	<li id="menu-item-6835" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6835"><a href="https://bengribaudo.com/tools/hubspot-power-bi-connector">HubSpot -> Power BI Connector</a></li>
</ul>
</li>
<li id="menu-item-3762" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3762"><a href="https://bengribaudo.com/about-me">About</a></li>
<li id="menu-item-6257" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6257"><a href="https://bengribaudo.com/email">Email List Signup</a></li>
</ul></div>		</nav><!-- #site-navigation -->

			</header><!-- #masthead -->

	<div id="main" class="wrapper">
	<div id="primary" class="site-content">
		<div id="content" role="main">

			
				
	<article id="post-6620" class="post-6620 post type-post status-publish format-standard hentry category-power-query-m-primer tag-pq-custom-connector tag-microsoft-excel tag-microsoft-power-bi tag-power-query-m tag-query-folding tag-table-view">
				<header class="entry-header">
			
						<h1 class="entry-title">Power Query M Primer (Part 24): Query Folding II</h1>
						
			
			<div class="post-details">
				<time class="entry-date" datetime="2022-03-21T13:41:03-05:00">March 21, 2022</time></a>									&bull; <span class="tag-list"><a href="https://bengribaudo.com/blog/tag/pq-custom-connector" rel="tag">Custom Connector</a>, <a href="https://bengribaudo.com/blog/tag/microsoft-excel" rel="tag">Microsoft Excel</a>, <a href="https://bengribaudo.com/blog/tag/microsoft-power-bi" rel="tag">Microsoft Power BI</a>, <a href="https://bengribaudo.com/blog/tag/power-query-m" rel="tag">Power Query M</a>, <a href="https://bengribaudo.com/blog/tag/query-folding" rel="tag">Query Folding</a>, <a href="https://bengribaudo.com/blog/tag/table-view" rel="tag">Table.View</a></span>
							</div>
		</header><!-- .entry-header -->

				<div class="entry-content">
			
<p><a href="https://bengribaudo.com/blog/2022/01/20/6500/power-query-m-primer-part-23-query-folding-i" data-type="post" data-id="6500">Last time</a>, we began a deep dive into the inner workings of query folding. We examined how you can implement foldability using <code><a href="https://docs.microsoft.com/en-us/powerquery-m/table-view" target="_blank" rel="noreferrer noopener">Table.View</a></code>, ending with a firm grasp on why answering the question &#8220;what functions fold?&#8221; isn&#8217;t simple, but rather depends on the Power Query version, the data connector and possibly even some combination of the particular operation&#8217;s parameters and the data set being accessed.</p>



<p>But this isn&#8217;t the only &#8220;moral of the lesson&#8221; to be gleaned from our query folding deep dive….</p>



<p>As part of processing an expression, do you think Power Query <strong>communicates just once</strong> with each external source? For that matter, does Power Query process your expression <strong>verbatim and exactly one time</strong>? On query folding: Is it <strong>guaranteed to be transparent</strong>, producing identical results regardless of whether an expression is processed locally by Power Query, partly folded to source or fully folded to source?</p>



<p>These questions, and their answers, will lead us to more morals to be learned from this continuation of our lesson on query folding!</p>



<span id="more-6620"></span>



<h1 class="wp-block-heading" id="series-index">Series Index</h1>



<ul>
<li><a href="https://bengribaudo.com/blog/2017/11/17/4107/power-query-m-primer-part1-introduction-simple-expressions-let">Introduction, Simple Expressions &amp; <code>let</code> (part 1)</a></li>



<li><a href="https://bengribaudo.com/blog/2017/11/28/4199/power-query-m-primer-part2-functions-defining">Functions: Defining (part 2)</a></li>



<li><a href="https://bengribaudo.com/blog/2017/12/08/4270/power-query-m-primer-part3-functions-function-values-passing-returning-defining-inline-recursion">Functions: Function Values, Passing, Returning, Defining Inline, Recursion (part 3)</a></li>



<li><a href="https://bengribaudo.com/blog/2018/01/19/4321/power-query-m-primer-part4-variables-identifiers">Variables &amp; Identifiers (part 4)</a></li>



<li><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm">Paradigm (part 5)</a></li>



<li><a href="https://bengribaudo.com/blog/2018/06/26/4470/power-query-m-primer-part6-types-intro-text">Types—Intro &amp; Text (Strings) (part 6)</a></li>



<li><a href="https://bengribaudo.com/blog/2018/07/31/4497/power-query-m-primer-part7-types-numbers">Types—Numbers (part 7)</a></li>



<li><a href="https://bengribaudo.com/blog/2018/08/15/4557/power-query-m-primer-part8-types-the-temporal-family">Types—The Temporal Family (part 8)</a></li>



<li><a href="https://bengribaudo.com/blog/2018/09/13/4617/power-query-m-primer-part9-types-logical-null-binary">Types—Logical, Null, Binary (part 9)</a></li>



<li><a href="https://bengribaudo.com/blog/2018/10/30/4644/power-query-m-primer-part10-types-list-record">Types—List, Record (part 10)</a></li>



<li><a href="https://bengribaudo.com/blog/2019/09/19/4713/power-query-m-primer-part11-tables-syntax">Tables—Syntax (part 11)</a></li>



<li><a href="https://bengribaudo.com/blog/2019/12/10/4778/power-query-m-primer-part12-tables-table-think-i">Tables—Table Think I (part 12)</a></li>



<li><a href="https://bengribaudo.com/blog/2019/12/20/4805/power-query-m-primer-part13-tables-table-think-ii">Tables—Table Think II (part 13)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/01/06/4844/power-query-m-primer-part14-control-structure">Control Structure (part 14)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/01/15/4883/power-query-m-primer-part-15-error-handling">Error Handling (part 15)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/02/05/4948/power-query-m-primer-part16-type-system-i">Type System I – Basics (part 16)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/02/28/5009/power-query-m-primer-part17-type-system-ii-facets">Type System II – Facets (part 17)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/06/02/5259/power-query-m-primer-part18-type-system-iii-custom-types">Type System III – Custom Types (part 18)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/09/03/5408/power-query-m-primer-part19-type-system-iv-ascription-conformance-and-equalitys-strange-behaviors">Type System IV – Ascription, Conformance and Equality’s “Strange” Behaviors (part 19)</a></li>



<li><a href="https://bengribaudo.com/blog/2021/03/17/5523/power-query-m-primer-part20-metadata">Metadata (part 20)</a></li>



<li><a href="https://bengribaudo.com/blog/2021/07/12/5809/power-query-m-primer-part21-identifier-scope-sections">Identifier Scope &amp; Sections (part 21)</a></li>



<li><a href="https://bengribaudo.com/blog/2021/09/01/5989/power-query-m-primer-part22-identifier-scope-ii-controlling-the-global-environment-closures">Identifier Scope II – Controlling the Global Environment, Closures (part 22)</a></li>



<li><a href="https://bengribaudo.com/blog/2022/01/20/6500/power-query-m-primer-part-23-query-folding-i" data-type="post" data-id="6500">Query Folding I (part 23)</a></li>



<li>Query Folding II (part 24) [this post]</li>



<li><a href="https://bengribaudo.com/blog/2022/12/23/7130/power-query-m-primer-part25-extending-the-global-environment">Extending the Global Environment (part 25)</a></li>



<li>More to come!</li>
</ul>



<h2 class="wp-block-heading">Chatting Happily Away</h2>



<p>When you think of fetching data from source, what communications do you imagine take place between Power Query and that source?</p>



<p>Maybe something like: First, open the connection. Next, authenticate. Then, send a <em>single</em> &#8220;query database&#8221; request (or, in the case of a paged web API, a <em>single</em> sequence of page fetch requests). In response, each result row is sent from the source to Power Query exactly one time.&nbsp; And that&#8217;s it. All done.</p>



<p>Sounds reasonable, and may be exactly what would happen if you manually queried the source using a tool like Azure Data Studio or SSMS. It may seem logical to assume Power Query works similarly, but this is <strong>not usually the case</strong>. Instead, Power Query can be chatty. That is, it may interact with the external source more than you might, at first glance, expect—a behavior which has ramifications you should be aware of.</p>



<p>Think back, if you would, to last time where we learned about <code>Table.View</code> handlers.</p>



<p>For starts, remember that a table view provides table type information (via handler <code>GetType</code>) separately from actual table row data (via handler <code>GetRows</code>). When Power Query retrieves data from a table view, it needs <em>both</em> the table&#8217;s type and its data, so invokes <em>both</em> handlers.</p>



<p>When no folding is in play, fetching data using a table view looks like:</p>



<ol type="1">
<li>Create an instance of the view (that is, either code written by you, or code inside a connector written by someone else, invokes function <code>Table.View</code>).</li>



<li>On this view, invoke handler <code>GetType</code>.</li>



<li>On this view, invoke handler <code>GetRows</code>.</li>
</ol>



<p>In most cases, this sequence will result in <strong>at least two communications</strong> with the data source:</p>



<ul>
<li>The first includes whatever information is necessary to compute the type that&#8217;s output by <code>GetType</code>. These details could be fetched and internally saved by the connector when it is initialized or fetched on demand by the view&#8217;s <code>GetType</code> when it is invoked.<br><br>Depending on the sophistication of the table view and the capabilities of the data source, what&#8217;s fetched as part of computing the type can range from just metadata about the expected result set to an entire result set whose type is read and its rows ignored. (Potentially fetching all rows may seem strange when just a type is needed, but remember that not every data source separately exposes metadata about the data it returns. Sometimes, the only way to determine the type of what will be returned is to actually have the source return that data.)</li>



<li>The second communication with the server is the actual result set retrieval, which occurs when <code>GetRows</code> is invoked.</li>
</ul>



<p>Again, reading data from a table view almost always involves <em>at least</em> two communications with the external source. This potentially grows when operations are query folded.</p>



<ol>
<li><span style="background-color:yellow">GetType</span></li>



<li><span style="background-color:mediumseagreen">OnTake</span></li>



<li><span style="background-color:mediumseagreen">GetType</span></li>



<li><span style="background-color:orchid">OnSkip</span></li>



<li><span style="background-color:orchid">GetType</span></li>



<li><span style="background-color:yellow">GetRows</span></li>
</ol>



<h2 class="wp-block-heading">Communicating More and More</h2>



<p>Remember that Power Query configures folding operations by calling <code>On*</code> handlers? Turns out, after calling each <code>On*</code> handler, Power Query has a tendency to also ask for a revised type. The resulting chain of handler invocations often looks like:</p>



<p>To generalize the pattern: Between the initial <code>GetType</code> invocation and the concluding <code>GetRows</code> call (highlighted in yellow; both of which we discussed a moment ago), are a series of <code>On*</code> handler + <code>GetType</code> handler invocation pairs, one pair per operation that&#8217;s folded (in this example, the pair for <code>OnTake</code> is highlighted in green; the pair for <code>OnSkip</code>, in purple).</p>



<p>Each of these handlers technically can call to source. Whether they do depends on how they were built, which likely was influenced by the capabilities of the data source.</p>



<p>We could imagine that a row offset or quantity limiting handler (<code>OnSkip</code> or <code>OnTake</code>, respectively) probably won&#8217;t call to source. (Technically, there&#8217;s no law forbidding a view&#8217;s developer from including logic in these handlers that contacts source, but there&#8217;s usually no need for this to occur.) However, <code>GetType</code> may contact source if it dynamically computes the type it returns on demand (i.e. instead of by consulting cached information or simply returning a hard-coded value).</p>



<p>In the case of a more complex operation, like a join, again, what happens depends. The view&#8217;s <code>OnJoin</code> handler may be able to decide whether to accept the join fold request based on what it already knows (e.g. by consulting information that&#8217;s already been cached). Or, when <code>OnJoin</code> is invoked, it may pull (meta)data from the source as part of determining whether to handle the join.</p>



<p>Even more communications could be involved. Imagine a join handled by a table view to a table from a different data source. If the other table contains a moderate number of rows, it&#8217;s possible that the view may want to fold join key column values from that other table into the query the view sends to its source, then join these prefiltered results to the other source&#8217;s data. If, instead, the other source contains more than a certain quantity of rows, the view may decline to handle the join, leaving it for Power Query to process internally. In this latter case, the view will make a probe fetch to the other source to determine the quantity of rows it contains, then decline the folding request; then, slightly later, Power Query will fetch rows from the other source as part of processing the join. The view&#8217;s &#8220;possibly prefilter&#8221; behavior resulted in an additional communication with a source (the probe fetch) being added into the mix.</p>



<p>All this said, the point here is not the exact specifics of how a particular table view, handler or connector works, nor is it the exact pattern of how Power Query invokes handlers. Rather, it&#8217;s to illustrate the fact that table views (and related code) may interact multiple times with sources—which may be more than you&#8217;d expect.</p>



<h2 class="wp-block-heading">Derivative Evaluations</h2>



<p>Not only can a single expression evaluation lead to a table view interacting multiple times with a source, but Power Query may evaluate your expression, or variations thereof, multiple times. This can multiply the number of view-to-source communications!</p>



<p>For example, Power Query&#8217;s data protection firewall may need information about your expression to help it figure out how to appropriately implement privacy level protections. To obtain the needed details, it may trigger a preliminary run of your expression—but with it wrapped in a <code>Table.FirstN(YourQuery, 1000)</code>. The firewall then uses what it receives back to help it revise your original query, wiring in the appropriate privacy gatekeeping code. Moments later, this rewritten query is run to produce the data that Power Query returns as its response to your original &#8220;evaluate query&#8221; request. You expected your query to be run once, but in actually, your original expression wasn&#8217;t run once or verbatim. Instead, multiple variations of it were run! (This isn&#8217;t to say that your original expression is never run exactly as you wrote it, but often this isn&#8217;t the case.)</p>



<p>Each derivative may result in additional communications with sources. These interactions may not be identical across derivatives, so may be query folded differently and/or result in different quantities of data being streamed. For example, the expression evaluated for the firewall-triggered discovery fetch mentioned a moment ago contains a <code>Table.FirstN</code>, which may result in a &#8220;TOP 1000&#8221; being added to that expression&#8217;s native query. In contrast, the derivative expression that&#8217;s run to output actual data won&#8217;t have this <code>Table.FirstN</code> added, so its native query won&#8217;t reflect it.</p>



<p>Then there&#8217;s query development: If you&#8217;re working inside Query Editor under Power Query&#8217;s default settings, each query step you define may get its own evaluation as part of generating its preview. In Power Query Online, each step may get its own evaluation as part of computing its step folding indicator icon. Again, almost certainly these introduce more &#8216;to source&#8217; communications.</p>



<p>And this isn&#8217;t all: Turns out, for some data sources (like OData, and sometimes ODBC), Power Query can&#8217;t always figure out their exact folding capabilities ahead of time. To compensate for this, Power Query starts by folding all the operations it thinks could fold then asks the source to execute the resulting native query. If that fails, Power Query may try again, but with less folding—perhaps even trying multiple variations of less folding—until either it finds a less folded version that works or decides to fall back to a simple, &#8220;no folding&#8221; native request to source. When present, this <strong><em>dynamic query plan</em></strong> behavior introduces even more communications to source.</p>



<p>As these examples show, producing a single table may result in numerous communications taking place between Power Query and sources. Hopefully by now, the erroneous preconception that, after authentication, Power Query always makes exactly one single call to source (or, in the case of a paged API, a single sequence of calls to source) has been shattered!</p>



<p>For practical purposes, the exact sequence of communications that take place between Power Query and a source should be considered an internal detail, not something to take dependencies on. You might be tempted to thoroughly research a specific scenario to figure out exactly what its sequence of Power Query-to-source interactions looks like. While this may be interesting, don&#8217;t assume that what you see is guaranteed to be what will take place next time. What you observed could change without notice for a variety of reasons (e.g. a Power Query update, a data connector update, your migrating the expression to a different Power Query environment, changes in metadata on the source, etc.), so your observations shouldn&#8217;t be taken as predictions of what the same behavior will look like next time.</p>



<h2 class="wp-block-heading">More Morals….</h2>



<p>Power Query poly-fetches. Asking Power Query to evaluate an expression may result in multiple communications with external sources, including potentially multiple runs of the actual &#8220;produce data&#8221; native query—with the exact quantity of these communications being, for practical purposes, not dependably predictable.</p>



<p>In some cases, it may take getting used to to align with this paradigm. Usually, it works reasonably well; sometimes, it bites. Practically, it lends to a number of applications, including….</p>



<h2 class="wp-block-heading">Moral of the Lesson #2</h2>



<p><strong>Do not use Power Query to make data modifications</strong>. No INSERTS, UPDATES, DETELEs. No HTTP PUTs or POSTs that change things.</p>



<p>Power Query is generally not suitable for data modification activities. Yes, technically, you have the ability to manually type in arbitrary native queries which Power Query will dutifully execute. However, Power Query&#8217;s poly-fetch behavior means that your arbitrary native query/request could be executed multiple times. If that native query is something like &#8220;<code>INSERT …</code>&#8221; or &#8220;<code>UPDATE …</code>&#8220;, or is an API call that makes changes, those modifications could end up being performed multiple times. Normally, making data modifications relies on the assumption that the given command is executed exactly once. If, instead, the command is run an unpredictable one or more times, negative ramifications may result (like more data being inserted than expected).</p>



<p>Please don&#8217;t try to shoehorn Power Query into being a tool for making data changes on external systems. It&#8217;s not meant to serve in capacities where guaranteed, precise control over how many times a native query is executed is important. Trying to make it do so may bite.</p>



<p>(Little known &#8220;secret&#8221;: Microsoft created an <a href="https://bengribaudo.com/blog/2021/08/19/5971/m-mysteries-the-mysterious-type-action">internal, undocumented type, action</a>, along with related functionality, to enable Power Query to perform data modifications, presumably in a way that avoids poly-fetch behavior. The fact that Microsoft felt it needful to add special functionality to handle making data modifications should be a clue to the rest of us: If using public Power Query to make data changes was deemed unsuitable by Microsoft, then our trying to do the same is probably quite unwise.)</p>



<h2 class="wp-block-heading">Moral of the Lesson #3</h2>



<p>Ideally, the data connectors and table views you use will be able to <strong>produce type information without fetching actual result sets</strong>. A well-built data connector will do this if it is programmatically practical to do so. If it cannot or does not, you may want to consider providing the appropriate type yourself.</p>



<p>Perhaps you&#8217;ve specified an arbitrary native query whose complexity exceeds the connector&#8217;s ability to successfully perform a &#8220;metadata only&#8221; discovery. Maybe you&#8217;re using a basic web API that doesn&#8217;t separately expose metadata information. In cases like these, if you know the type to be returned, you could wrap whatever table-producing function you&#8217;re using with a table view that has a <code>GetType</code> handler hand-coded to return the appropriate type.</p>



<p>For example, say you&#8217;re doing <code>Value.NativeQuery(SomeSource, SomeQuery)</code> in a case where the connector can&#8217;t use a metadata fetch to compute the type for the response, but you know what that type should be. You can provide this information by nesting the <code>Value.NativeQuery</code> call inside a <code>Table.View</code> like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
Table.View(
  null,
  &#91;
    GetType = () =&gt; (your hand-coded type goes here)
    GetRows = () =&gt; Value.NativeQuery(SomeSource, SomeQuery)
  ]
)
</pre></div>


<p>Of course, context is key. If your query runs almost instantaneously without this change, then you probably shouldn&#8217;t sweat over making it. On the other hand, if you know from checking logs that a single query evaluation request from you triggers multiple long-running calls to source, this may be a way to eliminate one of them and so notably speed up processing.</p>



<h2 class="wp-block-heading">Moral of the Lesson #4</h2>



<p>As we learned, your request that Power Query evaluate an expression may lead to multiple adaptations of that expression being run. If your original expression is fully foldable, the chances that these variations also fully fold is greatly increased.</p>



<p>For example, if some Power Query component decides to do a <code>Table.FirstN(YourQuery, 1000)</code> fetch, and <var>YourQuery</var> fully folds, then there&#8217;s a good chance that the <code>Table.FirstN</code>-wrapped version of the expression will also fully fold.</p>



<p>On the other hand, say that your original expression doesn&#8217;t fully fold and a derivative probe expression with a <code>Table.FirstN</code> limit doesn&#8217;t fold either. What happens in this case?</p>



<p>To produce rows for the probe fetch, Power Query may start a full, &#8220;all rows&#8221; read from source, then abort that after streaming 1,000 rows. This may not be as efficient as when the &#8220;TOP 1000&#8221; is actually folded back to source. However, so long as the source limits its efforts to processing just those rows that are read from it (or, at least, doesn&#8217;t go much beyond that), the performance difference between an aborted read and full folding likely won&#8217;t be all that much. If so, special effort <em>solely</em> to make probe/analysis expressions fully fold likely isn&#8217;t justified.</p>



<p>The situation may be much different if the source doesn&#8217;t limit its processing to just rows that are read. Imagine a stored procedure (or multi-step SQL statement) that starts by loading lots of rows into a temporary table, which it then processes before outputting any data. This preliminary loading and processing must be completed in its entirety before the proc outputs a single row—it takes place regardless of how many rows are read by Power Query; it&#8217;s not short-circuited if Power Query stops streaming after row 1,000. In a case like this, effort to make probe expressions fold more efficiently may pay significant dividends. One option here is to use a Table.View which translates folding requests into stored procedure parameters which the proc uses, when appropriate, to adjust the processing it performs (e.g. invoking view handler <code>OnTake</code> could result in a <code>@Max = limitSize</code> parameter being passed to the proc, which it interprets as a signal to constrain its preliminary loading and processing).</p>



<h2 class="wp-block-heading" id="persistent-query-cache">Persistent Query Cache</h2>



<p>As we&#8217;ve learned, asking Power Query to process a single expression can result in numerous communications with external data sources. Some of the resulting native requests may be exact duplicates. Sending the same request to source multiple times is inefficient. Thankfully, Power Query has a <strong>persistent query cache</strong> which can help deduplicate these communications, speeding up runtime and saving source processing efforts.</p>



<p>We&#8217;ve talked in more detail <a href="https://bengribaudo.com/blog/2019/12/20/4805/power-query-m-primer-part13-tables-table-think-ii#persistent-caching-of-native-query-results">before</a> about this cache, but for a quick recap:</p>



<p>Power Query can watch outbound native requests and cache the responses returned. When it sees a native request that is identical to one it has seen before (same query, same source, etc.), it may intercept the request. Instead of allowing it to be sent to the external source, it may answer it by returning cached results.</p>



<p>If and when the persistent query cache comes into play depends on multiple factors and is complex to predict (factors include data set size and timing of when the multiple identical requests complete). A switch from the cache servicing a particular request to not servicing it, or vice versa, can be one reason why a data load&#8217;s performance changes unexpectedly. For example, a particular result set could have grown to the point where it exceeds the cache&#8217;s size limit so is no longer being cached, resulting in requests that previously were answered by the cache taking longer to complete because they are now each being sent all the way to source.</p>



<p>Keep in mind that this cache only applies at the native query/request level. The persistent query cache does <em>not</em> cache the results produced by your M expressions—it <em>only</em> helps with results directly returned by external sources (e.g. the results sent back from the database in response to <code>SELECT * FROM SomeTable</code>).</p>



<p>Normally, the cache&#8217;s lifetime is limited to a single refresh operation (e.g. a single &#8220;Refresh All&#8221; in Microsoft Power BI Desktop) or shorter. However, query development tooling may use a longer lifespan cache. In Query Editor, this is why you sometimes see those &#8220;This preview may be older than X days&#8221; warnings: Query Editor is informing you about its cache&#8217;s extended age and offering you an option to trigger a refresh.</p>



<p>For more, hop back to <a href="https://bengribaudo.com/blog/2019/12/20/4805/power-query-m-primer-part13-tables-table-think-ii#persistent-caching-of-native-query-results">Table Think II (part 13)</a>.</p>



<h2 class="wp-block-heading">Power Query v. Folded to Source: Not Always the Same</h2>



<p>Query folding should be <strong>transparent</strong>, as far as results go. That is, the exact same results should be produced if an M expression&#8217;s logic is processed internally by Power Query, partly folded to source or fully folded to source. Processing efficiency may change, but the results output should not change because of query folding.</p>



<p>At least, <strong>that&#8217;s the <em>theory</em></strong>. But is it the guaranteed reality?</p>



<p>When a table view is used to implement query folding:</p>



<ul>
<li>The view translates the operations it agreed to fold into an appropriate native query/request.</li>



<li>The source executes that request, returning the appropriate response.</li>
</ul>



<p>In order for query folding to be transparent, the combined effects of the above two steps <strong>must produce exactly the same results</strong> as Power Query would produce if no folding took place.</p>



<p><strong>This does <em>not</em> always occur.</strong></p>



<p>Imagine a simple Microsoft SQL database table containing rows for &#8220;Joe&#8221; and &#8220;joe&#8221;. You filter this table using the following expression:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
Table.SelectRows(Source, each &#91;FirstName] = &quot;Joe&quot;)
</pre></div>


<p>If the above is processed locally by Power Query (i.e. not query folded), just the row for &#8220;Joe&#8221; will be returned because Power Query&#8217;s equality operator (=) performs case-sensitive string comparisons.</p>



<figure class="wp-block-image size-full is-resized"><a href="https://bengribaudo.com/wp-content/uploads/2022/03/ResultSetShowing1Row.png"><img decoding="async" src="https://bengribaudo.com/wp-content/uploads/2022/03/ResultSetShowing1Row.png" alt="Result set showing single &quot;Joe&quot; row" class="wp-image-6622" width="188" height="50" srcset="https://bengribaudo.com/wp-content/uploads/2022/03/ResultSetShowing1Row.png 375w, https://bengribaudo.com/wp-content/uploads/2022/03/ResultSetShowing1Row-300x80.png 300w" sizes="(max-width: 188px) 100vw, 188px" /></a></figure>



<p>Instead, suppose query folding takes place. The data connector will translate the above M logic into a SQL fragment along the lines of the below, which it incorporates into the larger SQL query it sends to the database server.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: sql; title: ; quick-code: false; notranslate" title="">
WHERE FirstName = 'Joe'
</pre></div>


<p>So far, so good. This SQL fragment appears to align with the original M expression&#8217;s logic.</p>



<p>When the full SQL statement is executed by the database server, what&#8217;s returned?</p>



<p>It depends, but likely:</p>



<figure class="wp-block-image size-full is-resized"><a href="https://bengribaudo.com/wp-content/uploads/2022/03/ResultSetShowing2Rows.png"><img decoding="async" loading="lazy" src="https://bengribaudo.com/wp-content/uploads/2022/03/ResultSetShowing2Rows.png" alt="Result set showing &quot;joe&quot; and &quot;Joe&quot;" class="wp-image-6623" width="188" height="72" srcset="https://bengribaudo.com/wp-content/uploads/2022/03/ResultSetShowing2Rows.png 375w, https://bengribaudo.com/wp-content/uploads/2022/03/ResultSetShowing2Rows-300x114.png 300w" sizes="(max-width: 188px) 100vw, 188px" /></a></figure>



<p>This is different from what Power Query produced. Why? In a nutshell, what equals meant to the database server was different from what it meant to Power Query.</p>



<p>When <code>Table.SelectRows</code>&#8216;s filter was folded to the database server, its logic switched from being processed using Power Query&#8217;s definition of equality to the server&#8217;s definition of equality—and those two definitions were not identical. In this case, as is common in the SQL Server world, the database table&#8217;s column was configured to have a case-insensitive <a href="https://bengribaudo.com/blog/2014/06/26/2860/adjusting-alphabetization">collation</a>, so <code>FirstName = 'Joe'</code> matched both &#8220;Joe&#8221; and &#8220;joe&#8221;.</p>



<p>Due to paradigm differences between Power Query and an external data source, unfortunately, query folding is not always transparent.</p>



<p>The preceding example focused on string comparisons, but this issue has the potential to affect any folded operation. If, between the data connector and the source, an exact match to Power Query&#8217;s behaviors is not achieved, the results output when query folding is in play may deviate from what Power Query would output if it evaluated the same logic itself.</p>



<p>Sometimes, folding non-transparency, when it occurs, is glaringly obvious; other times, it may slip by undetected for extended periods of time while still skewing results. You make a seemingly unrelated edit which impacts the foldability of another part of the expression—a part that unbeknown to you doesn&#8217;t fold transparently. The resulting variations go unnoticed for some time because they were unexpected and affect only a small percentage of rows. For that matter, maybe you didn&#8217;t make any M code edits at all: Instead, a database change or a Power Query upgrade impacted foldability and so led to a results variation—again without you readily noticing.</p>



<p>Please don&#8217;t let the lack of guaranteed transparency scare you away from query folding. The Power Query-powered portion of the data world has continued to thrive in spite of the fact that sometimes, in some cases, query folding isn&#8217;t transparent. Understanding that it may not always be transparent (and why it may not be transparent) can save countless hours of frustrating troubleshooting. At the same time, thankfully, this issue doesn&#8217;t seem to bite nearly as frequently or badly as its bark may make it sound—which is good, because query folding is a key component to achieving optimal performance in the Power Query world.</p>



<p>[Further Reading: <a href="https://bengribaudo.com/blog/2021/07/23/5890/equals-is-not-always-equivalent-when-query-folding-does-not-produce-identical-results">Equals Is Not Always Equivalent: When Query Folding Does Not Produce Identical Results</a> &amp; <a href="https://bengribaudo.com/blog/2021/08/06/5925/equals-is-not-always-equivalent-power-query-joins-vs-sql-joins">Equals Is Not Always Equivalent: Power Query Joins vs. SQL Joins</a>]</p>



<h2 class="wp-block-heading">Next Time</h2>



<p>Quite a number of functions (principally the standard library and data connectors) come from code you didn&#8217;t write. How do they get into the global environment? The answer, at least in part, just might have some relation to extensions. Sounds like a good topic area to <a href="https://bengribaudo.com/blog/2022/12/23/7130/power-query-m-primer-part25-extending-the-global-environment" data-type="post" data-id="7130">explore next time</a>!</p>



<p>Until then, happy M coding!</p>
<div class='yarpp yarpp-related yarpp-related-website yarpp-template-list'>
<!-- YARPP List -->
<h3>Related posts:</h3><ol>
<li><a href="https://bengribaudo.com/blog/2022/01/20/6500/power-query-m-primer-part-23-query-folding-i" rel="bookmark" title="Power Query M Primer (Part 23): Query Folding I">Power Query M Primer (Part 23): Query Folding I</a></li>
<li><a href="https://bengribaudo.com/blog/2022/01/04/6398/custom-folding-arbitrary-functions-oninvoke-table-viewfunction" rel="bookmark" title="Custom Folding Arbitrary Functions: OnInvoke &#038; Table.ViewFunction">Custom Folding Arbitrary Functions: OnInvoke &#038; Table.ViewFunction</a></li>
<li><a href="https://bengribaudo.com/blog/2022/01/12/6455/custom-folding-joins-tunneling-state-between-table-views" rel="bookmark" title="Custom Folding Joins: Tunneling State Between Table.Views">Custom Folding Joins: Tunneling State Between Table.Views</a></li>
<li><a href="https://bengribaudo.com/blog/2021/07/23/5890/equals-is-not-always-equivalent-when-query-folding-does-not-produce-identical-results" rel="bookmark" title="Equals Is Not Always Equivalent: When Query Folding Does Not Produce Identical Results">Equals Is Not Always Equivalent: When Query Folding Does Not Produce Identical Results</a></li>
</ol>
</div>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
											</footer><!-- .entry-meta -->
	</article><!-- #post -->

				
<div id="comments" class="comments-area">

	
			<h2 class="comments-title">
			6 thoughts on &ldquo;<span>Power Query M Primer (Part 24): Query Folding II</span>&rdquo;		</h2>

		<ol class="commentlist">
					<li class="comment even thread-even depth-1" id="li-comment-88879">
		<article id="comment-88879" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Alex Groberman</b> </cite><a href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii#comment-88879"><time datetime="2022-03-21T14:26:07-05:00">March 21, 2022 at 2:26 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Thanks again for another great post Ben! Can you cover recursion (and perhaps <code>List.Generate</code> as an alternative) in more detail?</p>
<p>For example, <code>let a = {1} &amp; @a in a</code> returns a circular reference error, but <code>let a = List.Generate(() =&gt; 1, each true, each _) in a</code> works just fine. Why?</p>
<p>Thanks!<br />
-Alex</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii?replytocom=88879#respond' data-commentid="88879" data-postid="6620" data-belowelement="comment-88879" data-respondelement="respond" data-replyto="Reply to Alex Groberman" aria-label='Reply to Alex Groberman'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				<ol class="children">
		<li class="comment byuser comment-author-bgribaudo bypostauthor odd alt depth-2" id="li-comment-88897">
		<article id="comment-88897" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn"><a href="http://www.bengribaudo.com/" class="url" rel="ugc external nofollow">Ben Gribaudo</a></b> <span>Post author</span></cite><a href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii#comment-88897"><time datetime="2022-05-04T09:35:07-05:00">May 4, 2022 at 9:35 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Thanks for the suggestion, Alex! I will keep it in mind.</p>
<p>On the question: For an authoritative answer on why using recursive references to build lists isn&#8217;t supported, you&#8217;d need to ask Microsoft. Considering how M is typically used, it could be that there wasn&#8217;t enough of a use case for this style of list building to justify supporting it. In contrast, your second example doesn&#8217;t use a recursive reference, so isn&#8217;t blocked by M&#8217;s anti-recursion guard.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii?replytocom=88897#respond' data-commentid="88897" data-postid="6620" data-belowelement="comment-88897" data-respondelement="respond" data-replyto="Reply to Ben Gribaudo" aria-label='Reply to Ben Gribaudo'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="li-comment-88883">
		<article id="comment-88883" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Lutz</b> </cite><a href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii#comment-88883"><time datetime="2022-03-29T18:21:52-05:00">March 29, 2022 at 6:21 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Just hypothetically (cough) if I make doubly sure that Query folding is disabled and _then_ I (hypothetically) issue a write back command against the source &#8211; would that (hypothetically) guarantee that this query is only executed once?</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii?replytocom=88883#respond' data-commentid="88883" data-postid="6620" data-belowelement="comment-88883" data-respondelement="respond" data-replyto="Reply to Lutz" aria-label='Reply to Lutz'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				<ol class="children">
		<li class="comment byuser comment-author-bgribaudo bypostauthor odd alt depth-2" id="li-comment-88884">
		<article id="comment-88884" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn"><a href="http://www.bengribaudo.com/" class="url" rel="ugc external nofollow">Ben Gribaudo</a></b> <span>Post author</span></cite><a href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii#comment-88884"><time datetime="2022-03-30T08:13:25-05:00">March 30, 2022 at 8:13 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>No. 🙂 The non-folded command still may be executed multiple times (e.g. for a firewall analysis fetch, to get its type, to actually perform the produce data run of the command, etc.).</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii?replytocom=88884#respond' data-commentid="88884" data-postid="6620" data-belowelement="comment-88884" data-respondelement="respond" data-replyto="Reply to Ben Gribaudo" aria-label='Reply to Ben Gribaudo'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="li-comment-88914">
		<article id="comment-88914" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Adam</b> </cite><a href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii#comment-88914"><time datetime="2022-06-16T09:35:26-05:00">June 16, 2022 at 9:35 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Hi there,</p>
<p>Ben, any clues when the next post come up? Got waiting anxious here. :p</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii?replytocom=88914#respond' data-commentid="88914" data-postid="6620" data-belowelement="comment-88914" data-respondelement="respond" data-replyto="Reply to Adam" aria-label='Reply to Adam'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				<ol class="children">
		<li class="comment byuser comment-author-bgribaudo bypostauthor odd alt depth-2" id="li-comment-88925">
		<article id="comment-88925" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn"><a href="http://www.bengribaudo.com/" class="url" rel="ugc external nofollow">Ben Gribaudo</a></b> <span>Post author</span></cite><a href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii#comment-88925"><time datetime="2022-06-27T08:22:59-05:00">June 27, 2022 at 8:22 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Not sure yet. I&#8217;d like to get it done&#8230;but need the time.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii?replytocom=88925#respond' data-commentid="88925" data-postid="6620" data-belowelement="comment-88925" data-respondelement="respond" data-replyto="Reply to Ben Gribaudo" aria-label='Reply to Ben Gribaudo'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .commentlist -->

		
		
	
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-ii#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://bengribaudo.com/wp-comments-post.php" method="post" id="commentform" class="comment-form"><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message">Required fields are marked <span class="required">*</span></span></p><p class="comment-form-comment"><label for="comment">Comment <span class="required">*</span></label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" autocomplete="name" required="required" /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" autocomplete="email" required="required" /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" autocomplete="url" /></p>
	<p class="comment-form-caslastname"><label for="caslastname">Last name of the person who runs this blog <span class="required">*</span></label> <input type="text" name="caslastname" id="caslastname" size="30" aria-required="true" /></p>
	<p class="comment-form-ssspamstopper"><label for="sssstopper-answer">What is the last name of the person who runs this blog?<span class="required">*</span></label> <input type="text" name="sssstopper-answer" id="sssstopper-answer" size="30" aria-required="true" required="required" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='6620' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	
</div><!-- #comments .comments-area -->

			
		</div><!-- #content -->
	</div><!-- #primary -->


			<div id="secondary" class="widget-area" role="complementary">
			<aside id="custom_html-2" class="widget_text widget widget_custom_html"><div class="textwidget custom-html-widget"><img src="/wp-content/uploads/2017/09/Profile-Picture-2017-09.jpg" alt="Profile Picture" />

<div style="text-align: center">
<a href="https://twitter.com/bgribaudo" target="_blank" rel="noopener">Twitter</a>  &bull; <a href="https://linkedin.com/in/bengribaudo/" target="_blank" rel="noopener">LinkedIn</a> &bull; <a href="mailto:ben@bengribaudo.com">Email</a>
</div></div></aside><aside id="block-2" class="widget widget_block widget_text">
<p><strong><span style="color:#bc0306" class="has-inline-color">Email List Sign Up</span></strong>—What to join my email list? <a href="https://bengribaudo.com/email" data-type="page" data-id="6244"><em>Subscribe today!</em></a></p>
</aside><aside id="block-12" class="widget widget_block widget_text">
<p><strong>Upcoming <a href="https://bengribaudo.com/courses/meet-m" data-type="page" data-id="6277"><em>Mastering M</em> Courses</a></strong> <br>- TBD: Late Summer 2023?</p>
</aside><aside id="block-14" class="widget widget_block widget_text">
<p><strong><a href="https://bengribaudo.com/courses/power-query-custom-connector-workshop">Custom Connector Deep Dive Workshop</a></strong><br>- Summer 2023</p>
</aside><aside id="block-3" class="widget widget_block widget_text">
<p><strong>Need help</strong> with a BI, data or development project? <em><a href="mailto:ben@bengribaudo.com">Let's talk!</a></em></p>
</aside><aside id="custom_html-4" class="widget_text widget widget_custom_html"><h3 class="widget-title">Featured Videos</h3><div class="textwidget custom-html-widget"><p><a href="/blog/2020/08/26/5417/how-power-query-thinks">
<img src="/wp-content/uploads/2021/07/HowPowerQueryThinksThumbnail.png" alt="How Power Query Thinks Thumbnail" />
<br />
How Power Query Thinks: Taking the Mystery Out of Streaming and Query Folding
</a>
<br /><br />
<a href="/blog/2017/09/19/3763/t-sql-on-the-wire-what-takes-place-between-client-and-server">
<img src="/wp-content/uploads/2017/09/TabularDataStreamPresentationThumbnail.png" alt="Tabular Data Stream Presentation Thumbnail" />
<br />
T-SQL on the Wire: What takes place between client and server</a></p></div></aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><h3 class="widget-title">Tags</h3><div class="tagcloud"><ul class='wp-tag-cloud' role='list'>
	<li><a href="https://bengribaudo.com/blog/tag/net" class="tag-cloud-link tag-link-6 tag-link-position-1" style="font-size: 16.676056338028pt;" aria-label=".Net (22 items)">.Net</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/net-core" class="tag-cloud-link tag-link-81 tag-link-position-2" style="font-size: 8pt;" aria-label=".Net Core (2 items)">.Net Core</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/auto-generation" class="tag-cloud-link tag-link-10 tag-link-position-3" style="font-size: 10.169014084507pt;" aria-label="Auto-Generation (4 items)">Auto-Generation</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/bug" class="tag-cloud-link tag-link-8 tag-link-position-4" style="font-size: 8pt;" aria-label="Bug (2 items)">Bug</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/c-sharp" class="tag-cloud-link tag-link-5 tag-link-position-5" style="font-size: 16.676056338028pt;" aria-label="C# (22 items)">C#</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/conversion-operators" class="tag-cloud-link tag-link-90 tag-link-position-6" style="font-size: 8pt;" aria-label="Conversion Operators (2 items)">Conversion Operators</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/pq-custom-connector" class="tag-cloud-link tag-link-137 tag-link-position-7" style="font-size: 14.901408450704pt;" aria-label="Custom Connector (14 items)">Custom Connector</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/data" class="tag-cloud-link tag-link-76 tag-link-position-8" style="font-size: 12.633802816901pt;" aria-label="Data (8 items)">Data</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/data-mashup-cmdlets" class="tag-cloud-link tag-link-113 tag-link-position-9" style="font-size: 10.169014084507pt;" aria-label="Data Mashup Cmdlets (4 items)">Data Mashup Cmdlets</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/data-transformation" class="tag-cloud-link tag-link-101 tag-link-position-10" style="font-size: 19.042253521127pt;" aria-label="Data Transformation (39 items)">Data Transformation</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/dataverse-web-api" class="tag-cloud-link tag-link-120 tag-link-position-11" style="font-size: 14.901408450704pt;" aria-label="Dataverse Web API (14 items)">Dataverse Web API</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/errors" class="tag-cloud-link tag-link-111 tag-link-position-12" style="font-size: 11.647887323944pt;" aria-label="Errors (6 items)">Errors</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/functions" class="tag-cloud-link tag-link-104 tag-link-position-13" style="font-size: 9.1830985915493pt;" aria-label="functions (3 items)">functions</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ienumerable" class="tag-cloud-link tag-link-79 tag-link-position-14" style="font-size: 8pt;" aria-label="IEnumerable (2 items)">IEnumerable</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/indexes" class="tag-cloud-link tag-link-70 tag-link-position-15" style="font-size: 8pt;" aria-label="Indexes (2 items)">Indexes</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/json" class="tag-cloud-link tag-link-139 tag-link-position-16" style="font-size: 8pt;" aria-label="JSON (2 items)">JSON</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/lazy-evaluation" class="tag-cloud-link tag-link-74 tag-link-position-17" style="font-size: 8pt;" aria-label="Lazy Evaluation (2 items)">Lazy Evaluation</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/magento" class="tag-cloud-link tag-link-30 tag-link-position-18" style="font-size: 13.521126760563pt;" aria-label="Magento (10 items)">Magento</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/microsoft-excel" class="tag-cloud-link tag-link-98 tag-link-position-19" style="font-size: 21.30985915493pt;" aria-label="Microsoft Excel (66 items)">Microsoft Excel</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/microsoft-power-bi" class="tag-cloud-link tag-link-99 tag-link-position-20" style="font-size: 22pt;" aria-label="Microsoft Power BI (78 items)">Microsoft Power BI</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/nuget" class="tag-cloud-link tag-link-82 tag-link-position-21" style="font-size: 8pt;" aria-label="NuGet (2 items)">NuGet</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ordering" class="tag-cloud-link tag-link-69 tag-link-position-22" style="font-size: 8pt;" aria-label="Ordering (2 items)">Ordering</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/pdf" class="tag-cloud-link tag-link-28 tag-link-position-23" style="font-size: 11.647887323944pt;" aria-label="PDF (6 items)">PDF</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/php" class="tag-cloud-link tag-link-27 tag-link-position-24" style="font-size: 11.647887323944pt;" aria-label="PHP (6 items)">PHP</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/power-query-m" class="tag-cloud-link tag-link-100 tag-link-position-25" style="font-size: 22pt;" aria-label="Power Query M (78 items)">Power Query M</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/powershell" class="tag-cloud-link tag-link-115 tag-link-position-26" style="font-size: 8pt;" aria-label="PowerShell (2 items)">PowerShell</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/privacy-levels-data-protection-firewall" class="tag-cloud-link tag-link-138 tag-link-position-27" style="font-size: 8pt;" aria-label="Privacy Levels/Data Protection Firewall (2 items)">Privacy Levels/Data Protection Firewall</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/prolog" class="tag-cloud-link tag-link-49 tag-link-position-28" style="font-size: 9.1830985915493pt;" aria-label="Prolog (3 items)">Prolog</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/query-folding" class="tag-cloud-link tag-link-133 tag-link-position-29" style="font-size: 9.1830985915493pt;" aria-label="Query Folding (3 items)">Query Folding</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/refactoring" class="tag-cloud-link tag-link-45 tag-link-position-30" style="font-size: 8pt;" aria-label="Refactoring (2 items)">Refactoring</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ruby" class="tag-cloud-link tag-link-39 tag-link-position-31" style="font-size: 10.957746478873pt;" aria-label="Ruby (5 items)">Ruby</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/security" class="tag-cloud-link tag-link-87 tag-link-position-32" style="font-size: 10.169014084507pt;" aria-label="Security (4 items)">Security</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/sql" class="tag-cloud-link tag-link-132 tag-link-position-33" style="font-size: 14.211267605634pt;" aria-label="SQL (12 items)">SQL</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/sql-server" class="tag-cloud-link tag-link-71 tag-link-position-34" style="font-size: 13.12676056338pt;" aria-label="SQL Server (9 items)">SQL Server</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ssis" class="tag-cloud-link tag-link-64 tag-link-position-35" style="font-size: 8pt;" aria-label="SSIS (2 items)">SSIS</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ssrs" class="tag-cloud-link tag-link-31 tag-link-position-36" style="font-size: 11.647887323944pt;" aria-label="SSRS (6 items)">SSRS</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/switch-case" class="tag-cloud-link tag-link-20 tag-link-position-37" style="font-size: 9.1830985915493pt;" aria-label="switch/case (3 items)">switch/case</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/table-view" class="tag-cloud-link tag-link-136 tag-link-position-38" style="font-size: 10.169014084507pt;" aria-label="Table.View (4 items)">Table.View</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/tds" class="tag-cloud-link tag-link-86 tag-link-position-39" style="font-size: 10.169014084507pt;" aria-label="TDS (4 items)">TDS</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/types" class="tag-cloud-link tag-link-109 tag-link-position-40" style="font-size: 13.915492957746pt;" aria-label="Types (11 items)">Types</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/unit-testing" class="tag-cloud-link tag-link-38 tag-link-position-41" style="font-size: 10.169014084507pt;" aria-label="Unit Testing (4 items)">Unit Testing</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/upsert" class="tag-cloud-link tag-link-122 tag-link-position-42" style="font-size: 8pt;" aria-label="Upsert (2 items)">Upsert</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/variables" class="tag-cloud-link tag-link-65 tag-link-position-43" style="font-size: 10.169014084507pt;" aria-label="Variables (4 items)">Variables</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/web-services" class="tag-cloud-link tag-link-47 tag-link-position-44" style="font-size: 9.1830985915493pt;" aria-label="Web Services (3 items)">Web Services</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/wpf" class="tag-cloud-link tag-link-4 tag-link-position-45" style="font-size: 13.915492957746pt;" aria-label="WPF (11 items)">WPF</a></li>
</ul>
</div>
</aside>
		<aside id="recent-posts-3" class="widget widget_recent_entries">
		<h3 class="widget-title">Recent Posts</h3>
		<ul>
											<li>
					<a href="https://bengribaudo.com/blog/2023/07/25/7371/privacy-levels-in-dataflows-click-to-continue-or-not">Privacy Levels in Dataflows: Click to Continue? (Or Not!)</a>
									</li>
											<li>
					<a href="https://bengribaudo.com/blog/2023/06/02/7352/rowexpression-from-itemexpression-from">RowExpression.From/ItemExpression.From</a>
									</li>
											<li>
					<a href="https://bengribaudo.com/blog/2023/04/14/7321/on-premises-data-gateway-not-just-for-private-resource-access">On-Premises Data Gateway: Not Just for Private Resource Access</a>
									</li>
											<li>
					<a href="https://bengribaudo.com/blog/2023/03/03/7292/lazy-streamed-immutable-try-building-a-table">Lazy, Streamed, Immutable: Try Building a Table</a>
									</li>
											<li>
					<a href="https://bengribaudo.com/blog/2023/02/15/7268/value-replacetype-table-column-renames-bug-warning">Value.ReplaceType &amp; Table Column Renames (Bug Warning!)</a>
									</li>
					</ul>

		</aside>		</div><!-- #secondary -->
		</div><!-- #main .wrapper -->
	<footer id="colophon" role="contentinfo">
		<div class="site-info">
									Copyright &copy; 2011&#8211;2023 Ben Gribaudo								
				<br />
				
				<div style="font-size:xx-small; "><a href="/privacy">Privacy Policy</a> • All trademarks property of their respective owners.</div>
							
		</div><!-- .site-info -->
	</footer><!-- #colophon -->
</div><!-- #page -->

<!-- Matomo --><script type="text/javascript">
var _paq = window._paq = window._paq || [];
_paq.push(['disableCookies']);
_paq.push(['enableJSErrorTracking']);_paq.push(['trackPageView']);_paq.push(['enableLinkTracking']);_paq.push(['alwaysUseSendBeacon']);_paq.push(['setTrackerUrl', "\/\/bengribaudo.com\/wp-content\/plugins\/matomo\/app\/matomo.php"]);_paq.push(['setSiteId', '1']);var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
g.type='text/javascript'; g.async=true; g.src="\/\/bengribaudo.com\/wp-content\/uploads\/matomo\/matomo.js"; s.parentNode.insertBefore(g,s);
</script>
<!-- End Matomo Code --><script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9b' id='syntaxhighlighter-core-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushAS3.js?ver=3.0.9b' id='syntaxhighlighter-brush-as3-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushArduino.js?ver=3.0.9b' id='syntaxhighlighter-brush-arduino-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushBash.js?ver=3.0.9b' id='syntaxhighlighter-brush-bash-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushColdFusion.js?ver=3.0.9b' id='syntaxhighlighter-brush-coldfusion-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushClojure.js?ver=20090602' id='syntaxhighlighter-brush-clojure-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9b' id='syntaxhighlighter-brush-cpp-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCSharp.js?ver=3.0.9b' id='syntaxhighlighter-brush-csharp-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCss.js?ver=3.0.9b' id='syntaxhighlighter-brush-css-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushDelphi.js?ver=3.0.9b' id='syntaxhighlighter-brush-delphi-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushDiff.js?ver=3.0.9b' id='syntaxhighlighter-brush-diff-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushErlang.js?ver=3.0.9b' id='syntaxhighlighter-brush-erlang-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushFSharp.js?ver=20091003' id='syntaxhighlighter-brush-fsharp-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushGo.js?ver=3.0.9b' id='syntaxhighlighter-brush-go-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushGroovy.js?ver=3.0.9b' id='syntaxhighlighter-brush-groovy-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushHaskell.js?ver=3.0.9b' id='syntaxhighlighter-brush-haskell-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js?ver=3.0.9b' id='syntaxhighlighter-brush-java-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJavaFX.js?ver=3.0.9b' id='syntaxhighlighter-brush-javafx-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJScript.js?ver=3.0.9b' id='syntaxhighlighter-brush-jscript-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushLatex.js?ver=20090613' id='syntaxhighlighter-brush-latex-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushMatlabKey.js?ver=20091209' id='syntaxhighlighter-brush-matlabkey-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushObjC.js?ver=20091207' id='syntaxhighlighter-brush-objc-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPerl.js?ver=3.0.9b' id='syntaxhighlighter-brush-perl-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9b' id='syntaxhighlighter-brush-php-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPlain.js?ver=3.0.9b' id='syntaxhighlighter-brush-plain-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPowerShell.js?ver=3.0.9b' id='syntaxhighlighter-brush-powershell-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPython.js?ver=3.0.9b' id='syntaxhighlighter-brush-python-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushR.js?ver=20100919' id='syntaxhighlighter-brush-r-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushRuby.js?ver=3.0.9b' id='syntaxhighlighter-brush-ruby-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushScala.js?ver=3.0.9b' id='syntaxhighlighter-brush-scala-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushSql.js?ver=3.0.9b' id='syntaxhighlighter-brush-sql-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushSwift.js?ver=3.0.9b' id='syntaxhighlighter-brush-swift-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushVb.js?ver=3.0.9b' id='syntaxhighlighter-brush-vb-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushXml.js?ver=3.0.9b' id='syntaxhighlighter-brush-xml-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushYaml.js?ver=3.0.9b' id='syntaxhighlighter-brush-yaml-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/PowerQueryMBrush/shBrushM.js?ver=1.1.0' id='syntaxhighlighter-brush-m-js'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.head.appendChild( corecss );
		var themecssurl = "https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.head.appendChild( themecss );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['auto-links'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

	// Infinite scroll support
	if ( typeof( jQuery ) !== 'undefined' ) {
		jQuery( function( $ ) {
			$( document.body ).on( 'post-load', function() {
				SyntaxHighlighter.highlight();
			} );
		} );
	}
</script>
<link rel='stylesheet' id='yarppRelatedCss-css' href='https://bengribaudo.com/wp-content/plugins/yet-another-related-posts-plugin/style/related.css?ver=5.30.5' type='text/css' media='all' />
<script type='text/javascript' src='https://bengribaudo.com/wp-includes/js/comment-reply.min.js?ver=6.2.2' id='comment-reply-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/themes/twentytwelve/js/navigation.js?ver=20141205' id='twentytwelve-navigation-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/page-links-to/dist/new-tab.js?ver=3.3.6' id='page-links-to-js'></script>
</body>
</html>
<!-- Dynamic page generated in 0.096 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2023-08-27 04:52:07 -->

<!-- super cache -->