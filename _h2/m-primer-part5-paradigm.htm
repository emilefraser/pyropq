<!DOCTYPE html>
<!--[if IE 7]>
<html class="ie ie7" lang="en-US">
<![endif]-->
<!--[if IE 8]>
<html class="ie ie8" lang="en-US">
<![endif]-->
<!--[if !(IE 7) & !(IE 8)]><!-->
<html lang="en-US">
<!--<![endif]-->
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>Power Query M Primer (Part 5): Paradigm | Ben Gribaudo</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="https://bengribaudo.com/xmlrpc.php" />
<!--[if lt IE 9]>
<script src="https://bengribaudo.com/wp-content/themes/twentytwelve/js/html5.js" type="text/javascript"></script>
<![endif]-->
<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="Ben Gribaudo &raquo; Feed" href="https://bengribaudo.com/feed" />
<link rel="alternate" type="application/rss+xml" title="Ben Gribaudo &raquo; Comments Feed" href="https://bengribaudo.com/comments/feed" />
<link rel="alternate" type="application/rss+xml" title="Ben Gribaudo &raquo; Power Query M Primer (Part 5): Paradigm Comments Feed" href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm/feed" />
<script type="text/javascript">
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/bengribaudo.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.2.2"}};
/*! This file is auto-generated */
!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){p.clearRect(0,0,i.width,i.height),p.fillText(e,0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(t,0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(p&&p.fillText)switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s("\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!s("\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!s("\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!s("\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udfff","\ud83e\udef1\ud83c\udffb\u200b\ud83e\udef2\ud83c\udfff")}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(e=t.source||{}).concatemoji?c(e.concatemoji):e.wpemoji&&e.twemoji&&(c(e.twemoji),c(e.wpemoji)))}(window,document,window._wpemojiSettings);
</script>
<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 0.07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css' href='https://bengribaudo.com/wp-content/plugins/gutenberg/build/block-library/style.css?ver=16.5.0' type='text/css' media='all' />
<link rel='stylesheet' id='wp-block-library-theme-css' href='https://bengribaudo.com/wp-content/plugins/gutenberg/build/block-library/theme.css?ver=16.5.0' type='text/css' media='all' />
<link rel='stylesheet' id='classic-theme-styles-css' href='https://bengribaudo.com/wp-includes/css/classic-themes.min.css?ver=6.2.2' type='text/css' media='all' />
<style id='global-styles-inline-css' type='text/css'>
body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #fff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--blue: #21759b;--wp--preset--color--dark-gray: #444;--wp--preset--color--medium-gray: #9f9f9f;--wp--preset--color--light-gray: #e6e6e6;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
.wp-block-pullquote{font-size: 1.5em;line-height: 1.6;}
.wp-block-navigation a:where(:not(.wp-element-button)){color: inherit;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
</style>
<link rel='stylesheet' id='parent-style-css' href='https://bengribaudo.com/wp-content/themes/twentytwelve/style.css?ver=6.2.2' type='text/css' media='all' />
<link rel='stylesheet' id='additional-google-fonts-css' href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed%3A300%2C300i%2C700%7COswald%3A400%2C500%2C700%7CBad+Script&#038;ver=6.2.2' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-fonts-css' href='https://fonts.googleapis.com/css?family=Open+Sans%3A400italic%2C700italic%2C400%2C700&#038;subset=latin%2Clatin-ext&#038;display=fallback' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-style-css' href='https://bengribaudo.com/wp-content/themes/twentytwelve-child/style.css?ver=20221101' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-block-style-css' href='https://bengribaudo.com/wp-content/themes/twentytwelve/css/blocks.css?ver=20190406' type='text/css' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='twentytwelve-ie-css' href='https://bengribaudo.com/wp-content/themes/twentytwelve/css/ie.css?ver=20150214' type='text/css' media='all' />
<![endif]-->
<script type='text/javascript' src='https://bengribaudo.com/wp-includes/js/jquery/jquery.min.js?ver=3.6.4' id='jquery-core-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.0' id='jquery-migrate-js'></script>
<link rel="https://api.w.org/" href="https://bengribaudo.com/wp-json/" /><link rel="alternate" type="application/json" href="https://bengribaudo.com/wp-json/wp/v2/posts/4391" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://bengribaudo.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://bengribaudo.com/wp-includes/wlwmanifest.xml" />
<meta name="generator" content="WordPress 6.2.2" />
<link rel="canonical" href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm" />
<link rel='shortlink' href='https://bengribaudo.com/?p=4391' />
<link rel="alternate" type="application/json+oembed" href="https://bengribaudo.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fbengribaudo.com%2Fblog%2F2018%2F02%2F28%2F4391%2Fpower-query-m-primer-part5-paradigm" />
<link rel="alternate" type="text/xml+oembed" href="https://bengribaudo.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fbengribaudo.com%2Fblog%2F2018%2F02%2F28%2F4391%2Fpower-query-m-primer-part5-paradigm&#038;format=xml" />
</head>

<body class="post-template-default single single-post postid-4391 single-format-standard wp-embed-responsive custom-font-enabled single-author">
<div id="page" class="hfeed site">
	<header id="masthead" class="site-header" role="banner">
		<a href="https://bengribaudo.com/" title="Ben Gribaudo (home)"  rel="home"><img id="site-logo" src="https://bengribaudo.com/wp-content/themes/twentytwelve-child/images/Logo.png" width="288" height="74" alt="Ben Gribaudo - Solutions Engineer, Senior Developer &amp; Database Engineer" /></a>

		<nav id="site-navigation" class="main-navigation" role="navigation">
			<button class="menu-toggle">Menu</button>
			<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>
			<div class="menu-main-navigation-container"><ul id="menu-main-navigation" class="nav-menu"><li id="menu-item-2431" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-2431"><a href="https://bengribaudo.com/">Home/Blog</a></li>
<li id="menu-item-3761" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-3761"><a href="https://bengribaudo.com/consulting">Consulting</a>
<ul class="sub-menu">
	<li id="menu-item-6440" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6440"><a href="https://bengribaudo.com/consulting/architecture-review">Architecture Review</a></li>
	<li id="menu-item-6362" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6362"><a href="https://bengribaudo.com/consulting/power-query">Power Query</a></li>
	<li id="menu-item-6934" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6934"><a href="https://bengribaudo.com/consulting/power-query-custom-connectors">Power Query Custom Connectors</a></li>
	<li id="menu-item-5777" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5777"><a href="https://bengribaudo.com/consulting/microsoft-power-bi">Microsoft Power BI</a></li>
</ul>
</li>
<li id="menu-item-6286" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-6286"><a href="https://bengribaudo.com/courses">Courses/Training</a>
<ul class="sub-menu">
	<li id="menu-item-6287" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6287"><a href="https://bengribaudo.com/courses/mastering-m">Mastering M: A Deep Dive Into the Language That Powers Power Query (live web course)</a></li>
	<li id="menu-item-7349" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-7349"><a href="https://bengribaudo.com/courses/power-query-custom-connector-workshop">Power Query Custom Connector Deep Dive Workshop</a></li>
	<li id="menu-item-6348" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6348"><a href="https://bengribaudo.com/courses/custom-training">Custom Training/Mentoring</a></li>
</ul>
</li>
<li id="menu-item-6686" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6686"><a href="https://bengribaudo.com/power-query-m-primer">Power Query M Primer</a></li>
<li id="menu-item-5398" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-5398"><a href="https://bengribaudo.com/tools">Tools</a>
<ul class="sub-menu">
	<li id="menu-item-5399" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5399"><a href="https://bengribaudo.com/tools/datamashupexplorer">Data Mashup Explorer</a></li>
	<li id="menu-item-5401" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5401"><a href="https://bengribaudo.com/tools/datamashupcmdlets">Data Mashup Cmdlets</a></li>
	<li id="menu-item-6835" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6835"><a href="https://bengribaudo.com/tools/hubspot-power-bi-connector">HubSpot -> Power BI Connector</a></li>
</ul>
</li>
<li id="menu-item-3762" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3762"><a href="https://bengribaudo.com/about-me">About</a></li>
<li id="menu-item-6257" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6257"><a href="https://bengribaudo.com/email">Email List Signup</a></li>
</ul></div>		</nav><!-- #site-navigation -->

			</header><!-- #masthead -->

	<div id="main" class="wrapper">
	<div id="primary" class="site-content">
		<div id="content" role="main">

			
				
	<article id="post-4391" class="post-4391 post type-post status-publish format-standard hentry category-power-query-m-primer tag-computer-language-theory tag-data-transformation tag-microsoft-excel tag-microsoft-power-bi tag-power-query-m">
				<header class="entry-header">
			
						<h1 class="entry-title">Power Query M Primer (Part 5): Paradigm</h1>
						
			
			<div class="post-details">
				<time class="entry-date" datetime="2018-02-28T14:46:45-06:00">February 28, 2018</time></a>									&bull; <span class="tag-list"><a href="https://bengribaudo.com/blog/tag/computer-language-theory" rel="tag">Computer Language Theory</a>, <a href="https://bengribaudo.com/blog/tag/data-transformation" rel="tag">Data Transformation</a>, <a href="https://bengribaudo.com/blog/tag/microsoft-excel" rel="tag">Microsoft Excel</a>, <a href="https://bengribaudo.com/blog/tag/microsoft-power-bi" rel="tag">Microsoft Power BI</a>, <a href="https://bengribaudo.com/blog/tag/power-query-m" rel="tag">Power Query M</a></span>
							</div>
		</header><!-- .entry-header -->

				<div class="entry-content">
			
<p>To improve our understanding of how Power Query works, let’s step back from the pieces and look at the paradigm—the methodology that M is built around. Conceptually, how does M work? How does it think? What makes it tick? The particulars, like variables, let expressions, functions and identifiers, are all important, but if we only focus on details, we might miss the big picture. We might not see the forest because we’re looking so intently at the trees. Let’s step back and learn about M’s <em>modus operandi</em>.</p>



<p>Without an awareness of M’s methodology, we might spend our days writing M code perplexed by certain behaviors, puzzled by why M seemingly doesn’t let us do certain things we might want to do and perspiring as we waste effort trying to mimic code patterns from other languages that are needless in M.</p>



<span id="more-4391"></span>



<h1 class="wp-block-heading">Series Index</h1>



<ul>
<li><a href="/blog/2017/11/17/4107/power-query-m-primer-part1-introduction-simple-expressions-let">Introduction, Simple Expressions &amp; <code>let</code> (part 1)</a></li>



<li><a href="/blog/2017/11/28/4199/power-query-m-primer-part2-functions-defining">Functions: Defining (part 2)</a></li>



<li><a href="/blog/2017/12/08/4270/power-query-m-primer-part3-functions-function-values-passing-returning-defining-inline-recursion">Functions: Function Values, Passing, Returning, Defining Inline, Recursion (part 3)</a></li>



<li><a href="/blog/2018/01/19/4321/power-query-m-primer-part4-variables-identifiers">Variables &amp; Identifiers (part 4)</a></li>



<li>Paradigm (part 5) [this post]</li>



<li><a href="/blog/2018/06/26/4470/power-query-m-primer-part6-types-intro-text">Types—Intro &amp; Text (Strings) (part 6)</a></li>



<li><a href="/blog/2018/07/31/4497/power-query-m-primer-part7-types-numbers">Types—Numbers (part 7)</a></li>



<li><a href="/blog/2018/08/15/4557/power-query-m-primer-part8-types-the-temporal-family">Types—The Temporal Family (part 8)</a></li>



<li><a href="/blog/2018/09/13/4617/power-query-m-primer-part9-types-logical-null-binary">Types—Logical, Null, Binary (part 9)</a></li>



<li><a href="/blog/2018/10/30/4644/power-query-m-primer-part10-types-list-record">Types—List, Record (part 10)</a></li>



<li><a href="/blog/2019/09/19/4713/power-query-m-primer-part11-tables-syntax">Tables—Syntax (part 11)</a></li>



<li><a href="/blog/2019/12/10/4778/power-query-m-primer-part12-tables-table-think-i">Tables—Table Think I (part 12)</a></li>



<li><a href="https://bengribaudo.com/blog/2019/12/20/4805/power-query-m-primer-part13-tables-table-think-ii">Tables—Table Think II (part 13)</a></li>



<li><a href="/blog/2020/01/06/4844/power-query-m-primer-part14-control-structure">Control Structure (part 14)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/01/15/4883/power-query-m-primer-part-15-error-handling">Error Handling (part 15)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/02/05/4948/power-query-m-primer-part16-type-system-i">Type System I – Basics (part 16)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/02/28/5009/power-query-m-primer-part17-type-system-ii-facets">Type System II – Facets (part 17)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/06/02/5259/power-query-m-primer-part18-type-system-iii-custom-types">Type System III – Custom Types (part 18)</a></li>



<li><a href="https://bengribaudo.com/blog/2020/09/03/5408/power-query-m-primer-part19-type-system-iv-ascription-conformance-and-equalitys-strange-behaviors">Type System IV – Ascription, Conformance and Equality’s “Strange” Behaviors (part 19)</a></li>



<li><a href="https://bengribaudo.com/blog/2021/03/17/5523/power-query-m-primer-part20-metadata" data-type="post" data-id="5523">Metadata (part 20)</a></li>



<li><a href="https://bengribaudo.com/blog/2021/07/12/5809/power-query-m-primer-part21-identifier-scope-sections" data-type="post" data-id="5809">Identifier Scope &amp; Sections (part 21)</a></li>



<li><a href="https://bengribaudo.com/blog/2021/09/01/5989/power-query-m-primer-part22-identifier-scope-ii-controlling-the-global-environment-closures" data-type="post" data-id="5989">Identifier Scope II – Controlling the Global Environment, Closures (part 22)</a></li>



<li><a href="https://bengribaudo.com/blog/2022/01/20/6500/power-query-m-primer-part-23-query-folding-i" data-type="post" data-id="6500">Query Folding I (part 23)</a></li>



<li><a href="https://bengribaudo.com/blog/2022/03/21/6620/power-query-m-primer-part24-query-folding-i" data-type="post" data-id="6620">Query Folding II (part 24)</a></li>



<li><a href="https://bengribaudo.com/blog/2022/12/23/7130/power-query-m-primer-part25-extending-the-global-environment">Extending the Global Environment (part 25)</a></li>



<li>More to come!</li>
</ul>



<h1 class="wp-block-heading" id="what">What It Is</h1>



<p>Power Query (a.k.a. M) is a query language. It’s intended for building <strong>queries</strong> that <strong>mash up data</strong>. Between “querying” and “mashing up,” M can be used to output data that has been cleaned up, filtered, transformed, aggregated and combined from multiple sources and formats. This is powerful!</p>



<p>However, M does not provide the ability to modify the data in data sources. It pulls data <em>from</em> sources but doesn’t write changes or insert new data <em>into</em> those sources. Also, it’s not a general-purpose programming or scripting language. M isn’t intended to do things like draw dialogs on the screen, copy files from one drive to another or print. M is for querying and mashing up data, not for solving all of the world’s computing problems! This tailored focus means that M can try to do one thing exceptionally well vs. trying to do so many different kinds of things that it only manages to do them so-so.</p>



<h1 class="wp-block-heading" id="how">How It Works</h1>



<p>On the technical side, in a nutshell, M is a <strong>functional language</strong>, sharing similarities with languages like F# and Haskell. Specifically, it’s mostly pure, higher-order and partially lazy. If you’re not sure what these terms mean, don’t worry. Just keep reading!</p>



<h2 class="wp-block-heading" id="evalution-order">Order of Evaluation</h2>



<p>M doesn’t necessarily execute expressions in the order they appear in scripts. M follows <strong>dependency ordering</strong>, not the physical order expressed in source code.</p>



<p>Think of how formulas in spreadsheets are evaluated. Below, in order to produce the requested output, first the formula in cell <var>A3</var> must be evaluated. Once its value has been computed, <var>A1</var> and <var>A2</var> are processed. Which is executed first doesn’t matter, so the spreadsheet engine gets to choose whether to execute <var>A1</var> before <var>A2</var> or the other way around (or maybe it executes both in parallel).</p>



<figure class="wp-block-image is-resized"><img decoding="async" src="https://bengribaudo.com/wp-content/uploads/2018/02/SpreadsheetWithFormulasDisplayed-300x182.png" alt="Spreadsheet with formulas displayed" class="wp-image-4393" width="150" height="91" srcset="https://bengribaudo.com/wp-content/uploads/2018/02/SpreadsheetWithFormulasDisplayed-300x182.png 300w, https://bengribaudo.com/wp-content/uploads/2018/02/SpreadsheetWithFormulasDisplayed.png 400w" sizes="(max-width: 150px) 100vw, 150px" /></figure>



<p>M’s interpreter works similarly. It looks at the expression that produces output and determines the ordering needed to make that output possible. If there are steps where that ordering isn’t dictated by dependencies, M gets to choose.</p>



<p>This implies that you can write M code in any order you’d like, even if that order is <em>out of order</em>—though &nbsp;in order coding will probably be easier for other humans who read your code. Below, these two expressions are both valid and equivalent in their output even though their child expressions are given in opposite order. In both cases, M figures out the correct execution order to use when it processes them.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
let
  Data = { 1, 2, 3},
  Result = List.Transform(Data, each _ * 10)
in
  Result
</pre></div>

<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
let
  Result = List.Transform(Data, each _ * 10),
  Data = { 1, 2, 3}
in
  Result
</pre></div>


<h2 class="wp-block-heading" id="partially-lazy">Partially Lazy</h2>



<p>When M’s interpreter determines evaluation order, what happens if it encounters an expression that isn’t needed?</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
let
  Source = { &quot;Bob&quot;, &quot;Bill&quot;, &quot;Sam&quot; },
  Filtered = List.Select(Source, each Text.StartsWith(_, &quot;B&quot;))
in
  Source
</pre></div>


<p>Above, what does the interpreter do with <var>Filtered</var>, which doesn’t need to be evaluated to produce the output required by the <code>in</code> clause? The interpreter skips <var>Filtered</var>. Since it’s unnecessary, it’s not evaluated. But why would someone write needless code?</p>


<div class="wp-block-image">
<figure class="alignright is-resized"><img decoding="async" loading="lazy" src="https://bengribaudo.com/wp-content/uploads/2018/02/AppliedStepsList-300x162.png" alt="Applied Steps list showing first step selected" class="wp-image-4394" width="225" height="122" srcset="https://bengribaudo.com/wp-content/uploads/2018/02/AppliedStepsList-300x162.png 300w, https://bengribaudo.com/wp-content/uploads/2018/02/AppliedStepsList.png 592w" sizes="(max-width: 225px) 100vw, 225px" /></figure></div>


<p>For one, how about testing? In the GUI query editor, you might select a step that comes before the last so that you can inspect its output. When you do this, <code>let</code>’s <code>in</code> clause is set to point to the selected step. However, the skipped over steps are left in the source code. M’s interpreter figures out that evaluating them isn’t required so skips them. This is good—otherwise, time might be wasted evaluating (potentially complex) extraneous expressions!</p>



<p>Another example:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
(even as logical) =&gt;
let
  Odd = { 1, 3, 5 },
  Even = { 2, 4, 6 }
in
  if even then Even else Odd
</pre></div>


<p>Each time the above method is invoked, either the value of <var>Odd</var> or <var>Even</var> is needed—but not both values. M evaluates only the variable that will be used by <em>in</em> to produce output. In contrast, if M were a procedural or object-oriented language, likely both variables (both <var>Odd</var> and <var>Even</var>) would be evaluated prior to the <code>in</code> clause being executed. Needless work would have been done! Thankfully, M doesn’t operate this way.</p>



<p>We’ve just seen that variable assignments in <code>let</code> expressions are evaluated lazily. This <strong>lazy evaluation</strong> behavior also holds true for lists, records and tables.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
List.Count({ ComputeValue(), ComputeAnotherValue() })
</pre></div>


<p>To count the number of items in a list, the M interpreter doesn’t need to evaluate the contents of those items, so it doesn’t. Above, <code>ComputeValue()</code> and <code>ComputeAnotherValue()</code> are never called because of lazy evaluation.</p>



<p>In the case of the record below, <var>Salary</var> is not evaluated because its value isn’t used when producing the requested output.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
let
  ComputeWeeklySalary = (wage) =&gt; ...,
  PayDetails =
  &#91;
    Wage = 25.10,
    Salary = ComputeWeeklySalary(Wage)
  ]
in
   PayDetails&#91;Wage]
</pre></div>


<p>Similar lazy behavior also holds true for tables. However, in M, <em>only</em> let expressions, lists, records and tables are lazy evaluated. <strong>Eager evaluation</strong> is used for everything else. This is why we say that M is only <strong>partly lazy</strong>.</p>



<p>For example, arguments to a function call are eagerly evaluated.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
let
  Numbers = { 1, 2, 3 },
  Letters = { &quot;A&quot;, &quot;B&quot;, &quot;C&quot; },
  Choose = (chooseFirst as logical, first, second) =&gt; 
    if chooseFirst then first else second
in
  Choose(true, Numbers, Letters)
</pre></div>


<p>Since both <var>Numbers</var> and <var>Letters</var> are used as parameters when <var>Choose</var> is called and parameters aren’t lazy evaluated, the expressions for both variables are evaluated even though only one of the two will used by the function.</p>



<h2 class="wp-block-heading" id="higher-ordered">Higher-Order</h2>



<p>Above, both lists are evaluated because they were passed as arguments to a function. What if we really wanted to avoid having both lists materialized only for one to be thrown away? Hmm…</p>



<p>Wait! Remember—we can pass functions around. Instead of passing Choose two lists of <em>values</em>, what if we adapt it so that we pass it <em>functions</em> that <em>produce</em> values when they are invoked? (I don’t mean<em> “</em>use functions in the parameter list to populate the function’s arguments,” I mean “pass the functions <em>as arguments</em> into the function itself.”) Choose can then choose to only execute one of the functions—the &nbsp;one that produces the output it needs. The other function is not invoked so the list it generates will not be generated.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
let
  Numbers = () =&gt; { 1, 2, 3 },
  Letters = () =&gt; { &quot;A&quot;, &quot;B&quot;, &quot;C&quot; },
  Choose = (chooseFirst as logical, first, second) =&gt; 
    if chooseFirst then first() else second()
in
  Choose(true, Numbers, Letters)
</pre></div>


<p>Technically, the M interpreter still evaluates both <var>Numbers</var> and <var>Letters</var>. However, since these names now identify functions, evaluating them simply takes their function expressions and turns them into function values (we talked about this in <a href="https://bengribaudo.com/blog/2017/12/08/4270/power-query-m-primer-part3-functions-function-values-passing-returning-defining-inline-recursion">part 3</a>). The two function values are passed into function <var>Choose</var> which then invokes <em>only</em> one of them. For short, we say that we passed two functions into <var>Choose</var> which chose which of the two to invoke (how’s that for a tongue twister!).</p>



<p>The ability to pass functions into other functions as arguments, as well the ability to return functions from functions (we also talked about this in <a href="https://bengribaudo.com/blog/2017/12/08/4270/power-query-m-primer-part3-functions-function-values-passing-returning-defining-inline-recursion">part 3</a>), makes M a <strong>higher-order</strong> language.</p>



<h2 class="wp-block-heading" id="streaming-semantics">Streaming Semantics</h2>



<p>Directly or indirectly, a M mashup is built by chaining methods. Call a function that fetches data from the source, pass its output to a function that applies a transformation, take the result of that function and pass it to another function that computes an aggregate and so forth.</p>



<p>However, the just-described way of passing data can be inefficient. Implemented literally, it requires that the full output of the first method be assembled before being passed to the next method in the chain. Then, that method processes its entire input, doing whatever it does until it has produced a full set of output. This is then passed to the next method, and so forth. Each step of the chain can involve iterating through the entire data set, once per step.</p>



<p>Why iterate through all the data once for each transform? Instead, why not iterate it once, feeding each item, as it’s encountered, through all the transform steps? Why not take the first item from the source, apply each transformation step to it in turn and then collect it as part of what eventually will be output by the expression as a whole, then repeat the process for the second item, and so forth?</p>



<p>For lists and tables, M supports something like this automatically, without you having to do anything! <strong>Streaming semantics</strong> allows M to <em>pull</em> items from <em>lists</em> and <em>tables</em> through the chain of transforms. You simply code up M like you always have—by building the chain of methods that define the desired mashup—and M’s interpreter, when appropriate, streams items through that chain instead of executing each transformation step in its entirety on the entire data set before executing the next step.</p>



<p>A moment ago, I mentioned pulling items through the chain of transforms. Why pull? Pulling allows the steps that needs data to control the amount of data that’s processed.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
let
  Numbers = List.Generate(()=&gt;1, each _ &lt;= 100000000, each _ + 1),
  Filtered = List.Transform(Numbers, each _ * 2),
  Result = List.FirstN(Filtered, 3)
in
  Result
</pre></div>


<p>Above, only the first three items are needed to produce the requested output. Since data is pulled as needed by the methods that needs it, <code>List.FirstN</code> causes only the first three items to flow through the method chain. Since only three items are pulled, <code>List.Generate</code> only generates the first three items. This is true even though <code>List.Generate</code> is coded to produce the sequence of numbers from 1 to 100,000,000. Whew! It would be wasteful to produce a 100,000,000 item list to have all but three of those items thrown away. Thankfully, with M’s streaming semantics, this didn’t happen.</p>



<p>You don’t need to do anything to turn on streaming behavior. You simply assemble the processing steps in the order you want them. M takes care of streaming, when appropriate.</p>



<p>M allows you to code up <em>what</em> should be done (the logic of the computations) without needing to define specifically how that <em>what</em> should be done (the flow of control). M, like other functional languages, is <strong>declarative, not imperative</strong>. You focus on declaring the intent; M takes care of choosing the technical steps to achieve that intent.</p>



<h2 class="wp-block-heading" id="query-folding">Query Folding</h2>



<p>Streaming semantics help with efficiency <em>within</em> M. Often, though, it’s more efficient to move processing <em>outside</em> of M’s interpreter and back to the source.</p>



<p>Imagine this scenario: You have a database table containing one million records, which your mashup filters down to what ends up being a single row. To process this expression, Power Query could fetch all one million records from the database, then apply the filter itself. This would work but would expend network bandwidth and M interpreter processing energies to handle the extra 999,999 records. If M only could tell the database “send me results that are already filtered….”</p>



<p>It can (at least, sometimes)! With <strong>query folding</strong>, M’s interpreter translates a chain of expressions into a query written <em>in the native language of the data source</em>.</p>



<p>For example, the below expression is translated into SQL that follows it. The net effect is that the database server only sends a single row across the wire to M. Yay!</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: m; title: ; quick-code: false; notranslate" title="">
let
    Source = Sql.Databases(&quot;some-server&quot;),
    MillionRowTable = Source{&#91;Schema=&quot;dbo&quot;,Item=&quot;MillionRowTable&quot;]}&#91;Data],
    Filtered = Table.SelectRows(MillionRowTable, each &#91;ID] = 123)
in
    Filtered
</pre></div>

<div class="wp-block-syntaxhighlighter-code "><pre class="brush: sql; title: ; quick-code: false; notranslate" title="">
select &#91;_].&#91;ID],
    &#91;_].&#91;Value]
from &#91;dbo].&#91;MillionRowTable] as &#91;_]
where &#91;_].&#91;ID] = 123 and &#91;_].&#91;ID] is not null
</pre></div>


<p>Not every data source and transform function supports query folding. The level of support is determined by the source and the revision of M being used (changes to sources and library functions introduced in revisions can expand support for query folding).</p>



<p>If a mashup contains both foldable and non-foldable steps, M (for obvious reasons!) processes the non-foldable steps itself. Once a non-foldable step is encountered in a particular chain, steps that logically come after that step in the chain won’t be folded.</p>



<p>Below, the last step won’t be folded even though it supports folding because it comes after a non-foldable step. The steps in <span style="color: #339966;">green</span> may be folded while the steps in <span style="color: #ff6600;">orange</span> will not be folded.</p>



<blockquote class="wp-block-quote">
<p><span style="color: #339966;">Source (supports folding)</span> -&gt; <span style="color: #339966;">Transform (supports folding)</span> -&gt; <span style="color: #ff6600;">Transform (doesn’t support folding)</span> -&gt; <span style="color: #ff6600;">Transform (supports folding)</span></p>
</blockquote>



<p>Similar to streaming semantics, you don’t need to do anything to turn query folding on. However, when working with large data sets, the division between folded and non-folded can have significant performance ramifications. At times, it may be advantageous to encourage M to fold as much as possible by reordering (and, if necessary, reengineering) steps so that as many as possible are foldable and come before any non-foldable steps.</p>



<p>Power Query sometimes helps you out here. If it determines that your expression <strong>can be revised to improve efficiency without changing the results</strong> that are produced, it may <strong>auto-optimize your mashup</strong>. The adjustments made can include reordering operations (say by taking the preceding example&#8217;s last <em>Transform (supports folding)</em> and moving it before <em>Transform (doesn&#8217;t support folding)</em>—a change which opens up the possibility that all of the mashup&#8217;s &#8220;supports folding&#8221; steps will fold).</p>


<div class="wp-block-image">
<figure class="alignright"><img decoding="async" loading="lazy" width="261" height="300" src="https://bengribaudo.com/wp-content/uploads/2018/02/ViewNativeQueryPopUpMenuOption-261x300.png" alt="Right-click menu showing View Native Query menu item" class="wp-image-4395" srcset="https://bengribaudo.com/wp-content/uploads/2018/02/ViewNativeQueryPopUpMenuOption-261x300.png 261w, https://bengribaudo.com/wp-content/uploads/2018/02/ViewNativeQueryPopUpMenuOption-624x717.png 624w, https://bengribaudo.com/wp-content/uploads/2018/02/ViewNativeQueryPopUpMenuOption.png 635w" sizes="(max-width: 261px) 100vw, 261px" /></figure></div>


<p>For visibility as to when query folding is being used, sometimes right-clicking on a step in the GUI’s <em>Applied Steps</em> menu helps. If the <em>View Native Query</em> menu item isn’t grayed out, the clicked-on step is being folded.</p>



<p>Unfortunately, not all native queries are displayed by this menu option, so the fact that it is grayed out doesn&#8217;t always mean the step isn&#8217;t being folded. When it&#8217;s grayed out, you may need to use a trace tool or check logs to determine whether query folding is in play.</p>



<h2 class="wp-block-heading" id="immutable">Immutable</h2>



<p>Have you noticed that we’ve assigned initial values to variables but never updated or assigned new values to variables? Ah! This is because we can’t. In M, it’s not possible to change a variable once its value has been evaluated. Instead, when a variable is evaluated for the first time, it’s value is fixed for life. M’s variables are <strong>immutable</strong>.</p>



<p>Well, that is, except for the one exception. When streaming semantics are involved, each time a variable that represents a streamed source is accessed, the data that’s streamed <em>may</em> be different.</p>



<p>M’s documentation is vague on this point, so here’s my guess as to what this rule means: If a variable exposing a stream is accessed multiple times and the data source changes or orders data differently between those accesses, the data streamed will be different.</p>



<p>Say the starting point is a database. If the first time the variable exposing the stream is accessed, the source database table contains three records and all records are requested, then three records will be streamed. After this access, suppose an external process adds a fourth record to the source table. The next time the variable is accessed with all records requested, the stream will contain four records.</p>



<p>Even if the data source remains unchanged between variable accesses, if the source doesn’t order the data it outputs the same way each time (for example, if the data comes from a SQL query that doesn’t include an <code>ORDER BY</code> clause), the stream exposed by the variable could stream the data items in a different order each time the variable is accessed.</p>



<p>So, in the case of streaming semantics, Power Query’s variables are <strong>not immutable</strong> because they are not evaluated once then fixed for life.</p>



<p>The designers of M could have made variables <em>always</em> immutable by having M’s interpreter cache the data streamed through each variable on first access, then return the cached data on each subsequent access. However, cached data has to be stored somewhere. Practically, that somewhere is in memory or on disk. Storing a large data set in either location might be prohibitive (the computer might not have enough memory; disk I/O would make processing much slower). Allowing data to be restreamed each time the variable exposing it is accessed avoids this issue.</p>



<h2 class="wp-block-heading" id="mostly-pure">Mostly Pure</h2>



<p>In the world of computer language theory, functions that comply with the following two rules are <strong>pure functions</strong>.</p>



<p>A function is a pure function if it:</p>



<ul>
<li>Always produces the same output given the same input. For example, calling <code>AddTwo(5)</code>, where <var>AddTwo</var> is defined as <code>(x) =&gt; x + 2</code>, will output <code>7</code> every time it’s called.</li>



<li>Does not have side effects. That is, the only effect calling the method has is producing output. The method won’t also, for example, have the side effect of modifying a global variable or saving changes to a file.</li>
</ul>



<p>In M, the very nature of the language makes any expression you write <strong>pure</strong> unless it accesses an impure library function or, possibly, encounters an error with one of its sub-steps.</p>



<p>Library functions can access the outside world. The outside world isn’t always deterministic. If you use a library function that reads from a file or database then rerun that expression a few moments later, you might get different results even though you called the method with the exact same arguments. Why? The file or database may have changed. This change in output means that the function doesn’t always produce the same output given the same input so we call it an <strong>impure function</strong>.</p>



<p>Errors in the sub-steps of an expression can also cause it to be non-deterministic and so to violate the ‘same input produces the same output’ rule. Take the expression <code>a + b</code> as an example. M’s interpreter is free to evaluate <var>a</var> and <var>b</var> in whichever order it chooses because the expression does not dictate a particular evaluation ordering. However, if both sub-expressions (both <var>a</var> and <var>b</var>) return errors, then which is evaluated first will determine the error returned by <code>a + b</code>. If, one time, M executes <var>a</var> first, its error will be the error returned by <code>a + b</code>. The next time, if <var>b</var> is executed first, <var>b</var>’s error will become the error that’s raised. The fact that, given the same input, the error returned could be the error from <var>a</var> or from <var>b</var> means that the expression doesn’t always produce the same output given the same input in this limited case.</p>



<p>So, M is <strong><em>mostly pure</em></strong>. The fact that some library functions aren’t pure is okay. If the language were 100% pure, its usefulness would be limited because it couldn’t read from the outside word (like databases, websites and files). These “impure” functions are what makes accessing the outside world possible. The occasional lack of purity encountered due to errors is usually a non-issue.</p>



<h1 class="wp-block-heading" id="conclusion">Conclusion</h1>



<p>Congratulations on making it through a lot of technical information! I hope what you’ve read has given you an understanding of how M works.</p>



<p>“How” has been our focus but “why?” is also an interesting question. In particular, if you come from a procedural or object-oriented background, some of the behaviors discussed may seem unduly restrictive. Why not allow variables to be changed? What’s the big deal about pure functions?</p>



<p>The stipulations we discussed enable M to work the way it does. If, say, functions you write could have side effects, M might be unable to use lazy evaluation because seemingly unneeded expressions might have side effects that you’re counting on. Allowing variables to be changed would limit the ability to use dependency ordering because deviating from literal source code order when executing could cause an intended variable manipulation to happen at the wrong time. These are just a couple examples of the benefits gained by this different way of doing things. In essence, if M worked more like a procedural or object-oriented language, you’d have to do what you do in those languages: <strong>imperatively</strong> code up the flow of control, instead of simply <strong>declaratively</strong> stating what you what done—which is what M’s <strong>functional</strong> nature allows you to do.</p>



<h1 class="wp-block-heading" id="next">Next Time</h1>



<p>With a foundation in the fundamentals established, it’s back to delving into the details! Next time, why don’t we examine <a href="https://bengribaudo.com/blog/2018/06/26/4470/power-query-m-primer-part6-types-intro-text">M’s types</a>? For example, do you know how to do a case-insensitive string comparison or encode a line return into a string?</p>



<p>Curious? <a href="https://bengribaudo.com/blog/2018/06/26/4470/power-query-m-primer-part6-types-intro-text">See you soon!</a></p>



<h2 class="wp-block-heading has-medium-gray-color has-text-color">Revision History</h2>



<ul class="has-medium-gray-color has-text-color">
<li><strong>2019-12-10</strong>: Updated section <em>Query Folding</em> to reflect the fact that a grayed out <em>View Native Query</em> menu option does not necessary imply that query folding is not occurring.</li>



<li><strong>2022-03-16</strong>: Revised section <em>Query Folding</em> to more accurately reflect how streaming works + added a description of Power Query&#8217;s expression auto-optimization functionality.</li>
</ul>
<div class='yarpp yarpp-related yarpp-related-website yarpp-template-list'>
<!-- YARPP List -->
<h3>Related posts:</h3><ol>
<li><a href="https://bengribaudo.com/blog/2017/11/17/4107/power-query-m-primer-part1-introduction-simple-expressions-let" rel="bookmark" title="Power Query M Primer (part 1): &lt;br /&gt;Introduction, Simple Expressions &#038; &lt;code&gt;let&lt;/code&gt;">Power Query M Primer (part 1): <br />Introduction, Simple Expressions &#038; <code>let</code></a></li>
<li><a href="https://bengribaudo.com/blog/2019/12/10/4778/power-query-m-primer-part12-tables-table-think-i" rel="bookmark" title="Power Query M Primer (Part 12): Tables—Table Think I">Power Query M Primer (Part 12): Tables—Table Think I</a></li>
<li><a href="https://bengribaudo.com/blog/2017/12/08/4270/power-query-m-primer-part3-functions-function-values-passing-returning-defining-inline-recursion" rel="bookmark" title="Power Query M Primer (part 3):&lt;br /&gt;Functions: Function Values, Passing, Returning, Defining Inline, Recursion">Power Query M Primer (part 3):<br />Functions: Function Values, Passing, Returning, Defining Inline, Recursion</a></li>
<li><a href="https://bengribaudo.com/blog/2018/10/30/4644/power-query-m-primer-part10-types-list-record" rel="bookmark" title="Power Query M Primer (Part 10): Types—List, Record">Power Query M Primer (Part 10): Types—List, Record</a></li>
</ol>
</div>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
											</footer><!-- .entry-meta -->
	</article><!-- #post -->

				
<div id="comments" class="comments-area">

	
			<h2 class="comments-title">
			13 thoughts on &ldquo;<span>Power Query M Primer (Part 5): Paradigm</span>&rdquo;		</h2>

		<ol class="commentlist">
					<li class="comment even thread-even depth-1" id="li-comment-88310">
		<article id="comment-88310" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Wouter De Raeve</b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88310"><time datetime="2018-04-26T14:28:00-05:00">April 26, 2018 at 2:28 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Thank you for writing this piece. It gives a unique view on the language. I hope to read more in the future.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88310#respond' data-commentid="88310" data-postid="4391" data-belowelement="comment-88310" data-respondelement="respond" data-replyto="Reply to Wouter De Raeve" aria-label='Reply to Wouter De Raeve'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-88313">
		<article id="comment-88313" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn"><a href="http://dingbatdata.com" class="url" rel="ugc external nofollow">Cameron Wallace</a></b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88313"><time datetime="2018-06-11T05:51:47-05:00">June 11, 2018 at 5:51 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Thanks for this. I learnt quite a bit from this post. It&#8217;s good to get some fundamentals.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88313#respond' data-commentid="88313" data-postid="4391" data-belowelement="comment-88313" data-respondelement="respond" data-replyto="Reply to Cameron Wallace" aria-label='Reply to Cameron Wallace'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="li-comment-88316">
		<article id="comment-88316" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Lochlan</b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88316"><time datetime="2018-07-02T22:23:12-05:00">July 2, 2018 at 10:23 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Thanks, your posts are very interesting. Is it possible to use for/while loops in M?</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88316#respond' data-commentid="88316" data-postid="4391" data-belowelement="comment-88316" data-respondelement="respond" data-replyto="Reply to Lochlan" aria-label='Reply to Lochlan'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				<ol class="children">
		<li class="comment byuser comment-author-bgribaudo bypostauthor odd alt depth-2" id="li-comment-88319">
		<article id="comment-88319" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn"><a href="http://www.bengribaudo.com/" class="url" rel="ugc external nofollow">Ben Gribaudo</a></b> <span>Post author</span></cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88319"><time datetime="2018-07-05T15:18:26-05:00">July 5, 2018 at 3:18 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Thank you for your kind words, Lochlan. To achieve the effect of looping in Power Query, use a function that iterates over the source and applies a transform function. For example, instead of doing something like &#8216;for each x in listY x * 2&#8217;, you can do <code><a href="https://msdn.microsoft.com/en-us/query-bi/m/list-transform" target="_blank" rel="noopener nofollow">List.Transform</a>(x, each _ * 2)</code>. <a href="https://msdn.microsoft.com/en-us/query-bi/m/list-accumulate" target="_blank" rel="noopener nofollow">List.Accumulate</a> may also be helpful.<a href="https://bengribaudo.com/wp-admin/edit-comments.php#comments-form" rel="ugc">https://bengribaudo.com/wp-admin/edit-comments.php#comments-form</a></p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88319#respond' data-commentid="88319" data-postid="4391" data-belowelement="comment-88319" data-respondelement="respond" data-replyto="Reply to Ben Gribaudo" aria-label='Reply to Ben Gribaudo'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="li-comment-88380">
		<article id="comment-88380" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Андрей Минаков</b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88380"><time datetime="2019-06-23T16:04:59-05:00">June 23, 2019 at 4:04 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Hi Ben! Thanks a lot for the great info! And I have a question. I found an error in <code>JoinKind.FullOuter</code> (as well as for <code>RightOuter). Luckily, I workarounded it via </code><code>Table.Buffer</code>. I expected that I could get the same effect passing the table as a parameter to some intermediate function, but this didn't work. For me it means that function parameters are not eagerly evaluated. Please could you comment on that?</p>
<p>The code which shows the error:</p>
<pre class="brush:plain">
let
    Source = Table.NestedJoin(Table.Buffer(#table(type table [k = number, w = text], {{1, "w"}, {2, "w"}})), {"k"}, Table.Buffer(#table(type table [k = number, w = text], {{2, "k"}, {4, "w"}})), {"k"}, "ww", JoinKind.FullOuter),
    #"1.Zombie Values if filter Null" = Table.SelectRows(Source, each ([w] = null)), 
    #"2.Zombie Null Rows when filter not null" = Table.SelectRows(Source, each ([w] <> null))
in 
    #"2.Zombie Null Rows when filter not null"</pre>
<p>The problem is that you see:<br />
In step 1 - 2 values in ww Field of the Table instead of 1.<br />
In step 2 - you can still see row with null values, despite the filter for not null values.</p>
<p>Using <code>Table.Buffer(Source)</code> solves the problem. But using <code>let f = (x)=&gt;x</code> in <code>f(Source)</code> doesn't. So definitely passing a table as a parameter doesn't mean evaluation of the table. Please could you comment on that?</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88380#respond' data-commentid="88380" data-postid="4391" data-belowelement="comment-88380" data-respondelement="respond" data-replyto="Reply to Андрей Минаков" aria-label='Reply to Андрей Минаков'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				<ol class="children">
		<li class="comment byuser comment-author-bgribaudo bypostauthor odd alt depth-2" id="li-comment-88381">
		<article id="comment-88381" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn"><a href="http://www.bengribaudo.com/" class="url" rel="ugc external nofollow">Ben Gribaudo</a></b> <span>Post author</span></cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88381"><time datetime="2019-06-28T08:44:56-05:00">June 28, 2019 at 8:44 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Interesting bug! I see on <a href="https://social.technet.microsoft.com/Forums/en-US/1734f05f-8131-4545-bc1f-7fd627c45f46/wrong-behavior-of-fullouter-and-rightouter-join-mode-followed-by-tableselectrows-and-2-other?forum=powerquery" target="_blank" rel="noopener noreferrer nofollow">TechNet</a> that you made Microsoft aware. Thank you! Hopefully, this problem can get fixed soon.</p>
<p>As to what you asked me to comment on, it might help to think about functions for a moment. Consider the function calls <code>DoSomthing(SomeFunction())</code> and <code>DoSomething(SomeFunction)</code>. Since function parameters are eager evaluated, in both cases the parameter is evaluated regardless of whether its value is used inside <var>DoSomething</var>. However, the value produced by that evaluation is different for each example. With the first call, the value is <em>the result</em> produced by invoking <var>SomeFunction</var>. For the second call, the value is <em>not</em> the result of invoking <var>SomeFunction</var> but rather a <em>function value</em> for <var>SomeFunction</var>. (A function value is the result of evaluating, but not invoking, a function. In a sense, it’s a handle or pointer to the function which the recipient can choose to invoke, if desired, at a point and time of its choosing. See <em>Function Values</em> and <em>Passing Functions</em> in <a href="https://bengribaudo.com/blog/2017/12/08/4270/power-query-m-primer-part3-functions-function-values-passing-returning-defining-inline-recursion" rel="noopener noreferrer" target="_blank">part 3</a> of this series.) </p>
<p>Now, to tables. In the case of the function call <code>SomeFunction(SomeTable)</code>, we know that the argument (<var>SomeTable</var>) will be eager evaluated, but what is the result of that evaluation? I’d suggest thinking of that result similar to a function value, but for tables. My guess is that, in essence, when the expression defining <var>SomeTable</var> is evaluated, the result is a “handle” allowing access to (streaming from/iteration of) the table defined by the table expression. (This is similar to how evaluating a function’s expression produces not the result of the function but rather a function value that can be invoked to produce the result.)</p>
<p>So, the table variable is eager evaluated, because it is a parameter; however, evaluating that variable does not result in materializing the entire table (e.g. buffering the table by evaluating each cell value’s expression and storing the result in memory). This is a very good thing! If passing a table as a function parameter resulted in it being materialized, then query folding would be pointless because each time the table variable was passed into a transform step it would be fully buffered.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88381#respond' data-commentid="88381" data-postid="4391" data-belowelement="comment-88381" data-respondelement="respond" data-replyto="Reply to Ben Gribaudo" aria-label='Reply to Ben Gribaudo'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
		<li class="comment even depth-2" id="li-comment-88414">
		<article id="comment-88414" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Aleksey Semiletov</b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88414"><time datetime="2019-10-17T05:13:27-05:00">October 17, 2019 at 5:13 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Andrey, there&#8217;s another way, instead of Table.Buffer you can use try &#8230; otherwise or if .. then .. else constructions in the filter expressions:</p>
<pre class="brush:plain">
let
    Source = Table.NestedJoin(#table(type table [k = number, w = text], {{1, "w"}, {2, "w"}}), {"k"}, #table(type table [k1 = number, w1 = text], {{2, "k"}, {4, "w"}}), {"k1"}, "ww", JoinKind.FullOuter),
    #"1.Zombie Values if filter Null" = Table.SelectRows(Source, each ([w] = null)), 
    #"2.Zombie Null Rows when filter not null" = Table.SelectRows(Source, each try [w]  null  otherwise null)
in 
    #"2.Zombie Null Rows when filter not null"
</pre>
<p>Why this works well? It&#8217;s all about &#8220;promises&#8221; 😉 In your case interpreter skiped your last filter (i don&#8217;t now why? it&#8217;s a bug), but when you add &#8220;try&#8221; it can&#8217;t skip this transformation. So it have to do your filter.<br />
I found it here: <a href="https://datachant.com/2018/02/14/split-camelcase-headers-m/" target="_blank" rel="noopener noreferrer nofollow">https://datachant.com/2018/02/14/split-camelcase-headers-m/</a><br />
That way helps when you work with big tables, or do many iterative calculations and can&#8217;t use Table.Buffer.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88414#respond' data-commentid="88414" data-postid="4391" data-belowelement="comment-88414" data-respondelement="respond" data-replyto="Reply to Aleksey Semiletov" aria-label='Reply to Aleksey Semiletov'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="li-comment-88435">
		<article id="comment-88435" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Ben Rogers</b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88435"><time datetime="2020-03-06T14:08:12-06:00">March 6, 2020 at 2:08 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>I was always mystified by what &#8220;Query Folding&#8221; meant prior to this, and I didn&#8217;t know that there was an easy way (the right-click trick) to see if it was actively being used. A lot of the concepts in this post were very enlightening! Thanks so much for sharing.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88435#respond' data-commentid="88435" data-postid="4391" data-belowelement="comment-88435" data-respondelement="respond" data-replyto="Reply to Ben Rogers" aria-label='Reply to Ben Rogers'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				<ol class="children">
		<li class="comment byuser comment-author-bgribaudo bypostauthor even depth-2" id="li-comment-88439">
		<article id="comment-88439" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn"><a href="http://www.bengribaudo.com/" class="url" rel="ugc external nofollow">Ben Gribaudo</a></b> <span>Post author</span></cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88439"><time datetime="2020-03-06T16:33:21-06:00">March 6, 2020 at 4:33 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Thank you for the kind words, Ben! On the query folding right-click check, just keep in mind that folding can be going on even when the &#8220;View Native Queries&#8221; menu option is grayed out.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88439#respond' data-commentid="88439" data-postid="4391" data-belowelement="comment-88439" data-respondelement="respond" data-replyto="Reply to Ben Gribaudo" aria-label='Reply to Ben Gribaudo'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-88575">
		<article id="comment-88575" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">Carlos Avila</b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88575"><time datetime="2020-11-21T20:47:05-06:00">November 21, 2020 at 8:47 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Muchas gracias Ben, gracias por compartir esta informacion muy valiosa para los que vamos iniciando</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88575#respond' data-commentid="88575" data-postid="4391" data-belowelement="comment-88575" data-respondelement="respond" data-replyto="Reply to Carlos Avila" aria-label='Reply to Carlos Avila'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="li-comment-88639">
		<article id="comment-88639" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">James Wagman</b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88639"><time datetime="2021-02-17T10:42:01-06:00">February 17, 2021 at 10:42 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Hi Ben &#8211; thanks for the explanation. Would you know where/if I could find further info on the history of the &#8220;M&#8221; language as implemented by Microsoft? For example &#8211; why did Microsoft choose to develop this language &#8211; is it an extension of another project at Microsoft? I&#8217;m not interested at this point in the technical details &#8211; more interested in a narrative history. </p>
<p>Thank you!</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88639#respond' data-commentid="88639" data-postid="4391" data-belowelement="comment-88639" data-respondelement="respond" data-replyto="Reply to James Wagman" aria-label='Reply to James Wagman'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				<ol class="children">
		<li class="comment byuser comment-author-bgribaudo bypostauthor odd alt depth-2" id="li-comment-88645">
		<article id="comment-88645" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn"><a href="http://www.bengribaudo.com/" class="url" rel="ugc external nofollow">Ben Gribaudo</a></b> <span>Post author</span></cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88645"><time datetime="2021-02-19T07:21:07-06:00">February 19, 2021 at 7:21 am</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Hi James,</p>
<p>Interesting question. I don&#8217;t know much in this regards. I know that back in the day Power Query used to be called Data Explorer (you can read a little about it on <a href="https://www.mattmasson.com/2013/02/exploring-data-explorer/" target="_blank" rel="noopener noreferrer nofollow ugc">Matt Masson&#8217;s blog</a>). Sounds like what you asked could make a good question for Twitter. </p>
<p>I&#8217;d be curious to hear what you learn on this.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88645#respond' data-commentid="88645" data-postid="4391" data-belowelement="comment-88645" data-respondelement="respond" data-replyto="Reply to Ben Gribaudo" aria-label='Reply to Ben Gribaudo'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				<ol class="children">
		<li class="comment even depth-3" id="li-comment-88646">
		<article id="comment-88646" class="comment">
			<header class="comment-meta comment-author vcard">
				<cite><b class="fn">James</b> </cite><a href="https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#comment-88646"><time datetime="2021-02-19T16:21:52-06:00">February 19, 2021 at 4:21 pm</time></a>				</header><!-- .comment-meta -->

				
				
				<section class="comment-content comment">
				<p>Thanks, Ben. I&#8217;ll let you know&#8230;.</p>
								</section><!-- .comment-content -->

				<div class="reply">
				<a rel='nofollow' class='comment-reply-link' href='https://bengribaudo.com/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm?replytocom=88646#respond' data-commentid="88646" data-postid="4391" data-belowelement="comment-88646" data-respondelement="respond" data-replyto="Reply to James" aria-label='Reply to James'>Reply</a> <span>&darr;</span>				</div><!-- .reply -->
			</article><!-- #comment-## -->
				</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .commentlist -->

		
		
	
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/blog/2018/02/28/4391/power-query-m-primer-part5-paradigm#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://bengribaudo.com/wp-comments-post.php" method="post" id="commentform" class="comment-form"><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message">Required fields are marked <span class="required">*</span></span></p><p class="comment-form-comment"><label for="comment">Comment <span class="required">*</span></label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" autocomplete="name" required="required" /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" autocomplete="email" required="required" /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" autocomplete="url" /></p>
	<p class="comment-form-caslastname"><label for="caslastname">Last name of the person who runs this blog <span class="required">*</span></label> <input type="text" name="caslastname" id="caslastname" size="30" aria-required="true" /></p>
	<p class="comment-form-ssspamstopper"><label for="sssstopper-answer">What is the last name of the person who runs this blog?<span class="required">*</span></label> <input type="text" name="sssstopper-answer" id="sssstopper-answer" size="30" aria-required="true" required="required" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='4391' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	
</div><!-- #comments .comments-area -->

			
		</div><!-- #content -->
	</div><!-- #primary -->


			<div id="secondary" class="widget-area" role="complementary">
			<aside id="custom_html-2" class="widget_text widget widget_custom_html"><div class="textwidget custom-html-widget"><img src="/wp-content/uploads/2017/09/Profile-Picture-2017-09.jpg" alt="Profile Picture" />

<div style="text-align: center">
<a href="https://twitter.com/bgribaudo" target="_blank" rel="noopener">Twitter</a>  &bull; <a href="https://linkedin.com/in/bengribaudo/" target="_blank" rel="noopener">LinkedIn</a> &bull; <a href="mailto:ben@bengribaudo.com">Email</a>
</div></div></aside><aside id="block-2" class="widget widget_block widget_text">
<p><strong><span style="color:#bc0306" class="has-inline-color">Email List Sign Up</span></strong>—What to join my email list? <a href="https://bengribaudo.com/email" data-type="page" data-id="6244"><em>Subscribe today!</em></a></p>
</aside><aside id="block-12" class="widget widget_block widget_text">
<p><strong>Upcoming <a href="https://bengribaudo.com/courses/meet-m" data-type="page" data-id="6277"><em>Mastering M</em> Courses</a></strong> <br>- TBD: Late Summer 2023?</p>
</aside><aside id="block-14" class="widget widget_block widget_text">
<p><strong><a href="https://bengribaudo.com/courses/power-query-custom-connector-workshop">Custom Connector Deep Dive Workshop</a></strong><br>- Summer 2023</p>
</aside><aside id="block-3" class="widget widget_block widget_text">
<p><strong>Need help</strong> with a BI, data or development project? <em><a href="mailto:ben@bengribaudo.com">Let's talk!</a></em></p>
</aside><aside id="custom_html-4" class="widget_text widget widget_custom_html"><h3 class="widget-title">Featured Videos</h3><div class="textwidget custom-html-widget"><p><a href="/blog/2020/08/26/5417/how-power-query-thinks">
<img src="/wp-content/uploads/2021/07/HowPowerQueryThinksThumbnail.png" alt="How Power Query Thinks Thumbnail" />
<br />
How Power Query Thinks: Taking the Mystery Out of Streaming and Query Folding
</a>
<br /><br />
<a href="/blog/2017/09/19/3763/t-sql-on-the-wire-what-takes-place-between-client-and-server">
<img src="/wp-content/uploads/2017/09/TabularDataStreamPresentationThumbnail.png" alt="Tabular Data Stream Presentation Thumbnail" />
<br />
T-SQL on the Wire: What takes place between client and server</a></p></div></aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><h3 class="widget-title">Tags</h3><div class="tagcloud"><ul class='wp-tag-cloud' role='list'>
	<li><a href="https://bengribaudo.com/blog/tag/net" class="tag-cloud-link tag-link-6 tag-link-position-1" style="font-size: 16.676056338028pt;" aria-label=".Net (22 items)">.Net</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/net-core" class="tag-cloud-link tag-link-81 tag-link-position-2" style="font-size: 8pt;" aria-label=".Net Core (2 items)">.Net Core</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/auto-generation" class="tag-cloud-link tag-link-10 tag-link-position-3" style="font-size: 10.169014084507pt;" aria-label="Auto-Generation (4 items)">Auto-Generation</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/bug" class="tag-cloud-link tag-link-8 tag-link-position-4" style="font-size: 8pt;" aria-label="Bug (2 items)">Bug</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/c-sharp" class="tag-cloud-link tag-link-5 tag-link-position-5" style="font-size: 16.676056338028pt;" aria-label="C# (22 items)">C#</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/conversion-operators" class="tag-cloud-link tag-link-90 tag-link-position-6" style="font-size: 8pt;" aria-label="Conversion Operators (2 items)">Conversion Operators</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/pq-custom-connector" class="tag-cloud-link tag-link-137 tag-link-position-7" style="font-size: 14.901408450704pt;" aria-label="Custom Connector (14 items)">Custom Connector</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/data" class="tag-cloud-link tag-link-76 tag-link-position-8" style="font-size: 12.633802816901pt;" aria-label="Data (8 items)">Data</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/data-mashup-cmdlets" class="tag-cloud-link tag-link-113 tag-link-position-9" style="font-size: 10.169014084507pt;" aria-label="Data Mashup Cmdlets (4 items)">Data Mashup Cmdlets</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/data-transformation" class="tag-cloud-link tag-link-101 tag-link-position-10" style="font-size: 19.042253521127pt;" aria-label="Data Transformation (39 items)">Data Transformation</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/dataverse-web-api" class="tag-cloud-link tag-link-120 tag-link-position-11" style="font-size: 14.901408450704pt;" aria-label="Dataverse Web API (14 items)">Dataverse Web API</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/errors" class="tag-cloud-link tag-link-111 tag-link-position-12" style="font-size: 11.647887323944pt;" aria-label="Errors (6 items)">Errors</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/functions" class="tag-cloud-link tag-link-104 tag-link-position-13" style="font-size: 9.1830985915493pt;" aria-label="functions (3 items)">functions</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ienumerable" class="tag-cloud-link tag-link-79 tag-link-position-14" style="font-size: 8pt;" aria-label="IEnumerable (2 items)">IEnumerable</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/indexes" class="tag-cloud-link tag-link-70 tag-link-position-15" style="font-size: 8pt;" aria-label="Indexes (2 items)">Indexes</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/json" class="tag-cloud-link tag-link-139 tag-link-position-16" style="font-size: 8pt;" aria-label="JSON (2 items)">JSON</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/lazy-evaluation" class="tag-cloud-link tag-link-74 tag-link-position-17" style="font-size: 8pt;" aria-label="Lazy Evaluation (2 items)">Lazy Evaluation</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/magento" class="tag-cloud-link tag-link-30 tag-link-position-18" style="font-size: 13.521126760563pt;" aria-label="Magento (10 items)">Magento</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/microsoft-excel" class="tag-cloud-link tag-link-98 tag-link-position-19" style="font-size: 21.30985915493pt;" aria-label="Microsoft Excel (66 items)">Microsoft Excel</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/microsoft-power-bi" class="tag-cloud-link tag-link-99 tag-link-position-20" style="font-size: 22pt;" aria-label="Microsoft Power BI (78 items)">Microsoft Power BI</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/nuget" class="tag-cloud-link tag-link-82 tag-link-position-21" style="font-size: 8pt;" aria-label="NuGet (2 items)">NuGet</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ordering" class="tag-cloud-link tag-link-69 tag-link-position-22" style="font-size: 8pt;" aria-label="Ordering (2 items)">Ordering</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/pdf" class="tag-cloud-link tag-link-28 tag-link-position-23" style="font-size: 11.647887323944pt;" aria-label="PDF (6 items)">PDF</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/php" class="tag-cloud-link tag-link-27 tag-link-position-24" style="font-size: 11.647887323944pt;" aria-label="PHP (6 items)">PHP</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/power-query-m" class="tag-cloud-link tag-link-100 tag-link-position-25" style="font-size: 22pt;" aria-label="Power Query M (78 items)">Power Query M</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/powershell" class="tag-cloud-link tag-link-115 tag-link-position-26" style="font-size: 8pt;" aria-label="PowerShell (2 items)">PowerShell</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/privacy-levels-data-protection-firewall" class="tag-cloud-link tag-link-138 tag-link-position-27" style="font-size: 8pt;" aria-label="Privacy Levels/Data Protection Firewall (2 items)">Privacy Levels/Data Protection Firewall</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/prolog" class="tag-cloud-link tag-link-49 tag-link-position-28" style="font-size: 9.1830985915493pt;" aria-label="Prolog (3 items)">Prolog</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/query-folding" class="tag-cloud-link tag-link-133 tag-link-position-29" style="font-size: 9.1830985915493pt;" aria-label="Query Folding (3 items)">Query Folding</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/refactoring" class="tag-cloud-link tag-link-45 tag-link-position-30" style="font-size: 8pt;" aria-label="Refactoring (2 items)">Refactoring</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ruby" class="tag-cloud-link tag-link-39 tag-link-position-31" style="font-size: 10.957746478873pt;" aria-label="Ruby (5 items)">Ruby</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/security" class="tag-cloud-link tag-link-87 tag-link-position-32" style="font-size: 10.169014084507pt;" aria-label="Security (4 items)">Security</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/sql" class="tag-cloud-link tag-link-132 tag-link-position-33" style="font-size: 14.211267605634pt;" aria-label="SQL (12 items)">SQL</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/sql-server" class="tag-cloud-link tag-link-71 tag-link-position-34" style="font-size: 13.12676056338pt;" aria-label="SQL Server (9 items)">SQL Server</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ssis" class="tag-cloud-link tag-link-64 tag-link-position-35" style="font-size: 8pt;" aria-label="SSIS (2 items)">SSIS</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/ssrs" class="tag-cloud-link tag-link-31 tag-link-position-36" style="font-size: 11.647887323944pt;" aria-label="SSRS (6 items)">SSRS</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/switch-case" class="tag-cloud-link tag-link-20 tag-link-position-37" style="font-size: 9.1830985915493pt;" aria-label="switch/case (3 items)">switch/case</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/table-view" class="tag-cloud-link tag-link-136 tag-link-position-38" style="font-size: 10.169014084507pt;" aria-label="Table.View (4 items)">Table.View</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/tds" class="tag-cloud-link tag-link-86 tag-link-position-39" style="font-size: 10.169014084507pt;" aria-label="TDS (4 items)">TDS</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/types" class="tag-cloud-link tag-link-109 tag-link-position-40" style="font-size: 13.915492957746pt;" aria-label="Types (11 items)">Types</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/unit-testing" class="tag-cloud-link tag-link-38 tag-link-position-41" style="font-size: 10.169014084507pt;" aria-label="Unit Testing (4 items)">Unit Testing</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/upsert" class="tag-cloud-link tag-link-122 tag-link-position-42" style="font-size: 8pt;" aria-label="Upsert (2 items)">Upsert</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/variables" class="tag-cloud-link tag-link-65 tag-link-position-43" style="font-size: 10.169014084507pt;" aria-label="Variables (4 items)">Variables</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/web-services" class="tag-cloud-link tag-link-47 tag-link-position-44" style="font-size: 9.1830985915493pt;" aria-label="Web Services (3 items)">Web Services</a></li>
	<li><a href="https://bengribaudo.com/blog/tag/wpf" class="tag-cloud-link tag-link-4 tag-link-position-45" style="font-size: 13.915492957746pt;" aria-label="WPF (11 items)">WPF</a></li>
</ul>
</div>
</aside>
		<aside id="recent-posts-3" class="widget widget_recent_entries">
		<h3 class="widget-title">Recent Posts</h3>
		<ul>
											<li>
					<a href="https://bengribaudo.com/blog/2023/07/25/7371/privacy-levels-in-dataflows-click-to-continue-or-not">Privacy Levels in Dataflows: Click to Continue? (Or Not!)</a>
									</li>
											<li>
					<a href="https://bengribaudo.com/blog/2023/06/02/7352/rowexpression-from-itemexpression-from">RowExpression.From/ItemExpression.From</a>
									</li>
											<li>
					<a href="https://bengribaudo.com/blog/2023/04/14/7321/on-premises-data-gateway-not-just-for-private-resource-access">On-Premises Data Gateway: Not Just for Private Resource Access</a>
									</li>
											<li>
					<a href="https://bengribaudo.com/blog/2023/03/03/7292/lazy-streamed-immutable-try-building-a-table">Lazy, Streamed, Immutable: Try Building a Table</a>
									</li>
											<li>
					<a href="https://bengribaudo.com/blog/2023/02/15/7268/value-replacetype-table-column-renames-bug-warning">Value.ReplaceType &amp; Table Column Renames (Bug Warning!)</a>
									</li>
					</ul>

		</aside>		</div><!-- #secondary -->
		</div><!-- #main .wrapper -->
	<footer id="colophon" role="contentinfo">
		<div class="site-info">
									Copyright &copy; 2011&#8211;2023 Ben Gribaudo								
				<br />
				
				<div style="font-size:xx-small; "><a href="/privacy">Privacy Policy</a> • All trademarks property of their respective owners.</div>
							
		</div><!-- .site-info -->
	</footer><!-- #colophon -->
</div><!-- #page -->

<!-- Matomo --><script type="text/javascript">
var _paq = window._paq = window._paq || [];
_paq.push(['disableCookies']);
_paq.push(['enableJSErrorTracking']);_paq.push(['trackPageView']);_paq.push(['enableLinkTracking']);_paq.push(['alwaysUseSendBeacon']);_paq.push(['setTrackerUrl', "\/\/bengribaudo.com\/wp-content\/plugins\/matomo\/app\/matomo.php"]);_paq.push(['setSiteId', '1']);var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
g.type='text/javascript'; g.async=true; g.src="\/\/bengribaudo.com\/wp-content\/uploads\/matomo\/matomo.js"; s.parentNode.insertBefore(g,s);
</script>
<!-- End Matomo Code --><script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9b' id='syntaxhighlighter-core-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushAS3.js?ver=3.0.9b' id='syntaxhighlighter-brush-as3-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushArduino.js?ver=3.0.9b' id='syntaxhighlighter-brush-arduino-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushBash.js?ver=3.0.9b' id='syntaxhighlighter-brush-bash-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushColdFusion.js?ver=3.0.9b' id='syntaxhighlighter-brush-coldfusion-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushClojure.js?ver=20090602' id='syntaxhighlighter-brush-clojure-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9b' id='syntaxhighlighter-brush-cpp-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCSharp.js?ver=3.0.9b' id='syntaxhighlighter-brush-csharp-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCss.js?ver=3.0.9b' id='syntaxhighlighter-brush-css-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushDelphi.js?ver=3.0.9b' id='syntaxhighlighter-brush-delphi-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushDiff.js?ver=3.0.9b' id='syntaxhighlighter-brush-diff-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushErlang.js?ver=3.0.9b' id='syntaxhighlighter-brush-erlang-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushFSharp.js?ver=20091003' id='syntaxhighlighter-brush-fsharp-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushGo.js?ver=3.0.9b' id='syntaxhighlighter-brush-go-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushGroovy.js?ver=3.0.9b' id='syntaxhighlighter-brush-groovy-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushHaskell.js?ver=3.0.9b' id='syntaxhighlighter-brush-haskell-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js?ver=3.0.9b' id='syntaxhighlighter-brush-java-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJavaFX.js?ver=3.0.9b' id='syntaxhighlighter-brush-javafx-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJScript.js?ver=3.0.9b' id='syntaxhighlighter-brush-jscript-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushLatex.js?ver=20090613' id='syntaxhighlighter-brush-latex-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushMatlabKey.js?ver=20091209' id='syntaxhighlighter-brush-matlabkey-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushObjC.js?ver=20091207' id='syntaxhighlighter-brush-objc-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPerl.js?ver=3.0.9b' id='syntaxhighlighter-brush-perl-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPhp.js?ver=3.0.9b' id='syntaxhighlighter-brush-php-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPlain.js?ver=3.0.9b' id='syntaxhighlighter-brush-plain-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPowerShell.js?ver=3.0.9b' id='syntaxhighlighter-brush-powershell-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPython.js?ver=3.0.9b' id='syntaxhighlighter-brush-python-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/third-party-brushes/shBrushR.js?ver=20100919' id='syntaxhighlighter-brush-r-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushRuby.js?ver=3.0.9b' id='syntaxhighlighter-brush-ruby-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushScala.js?ver=3.0.9b' id='syntaxhighlighter-brush-scala-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushSql.js?ver=3.0.9b' id='syntaxhighlighter-brush-sql-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushSwift.js?ver=3.0.9b' id='syntaxhighlighter-brush-swift-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushVb.js?ver=3.0.9b' id='syntaxhighlighter-brush-vb-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushXml.js?ver=3.0.9b' id='syntaxhighlighter-brush-xml-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushYaml.js?ver=3.0.9b' id='syntaxhighlighter-brush-yaml-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/PowerQueryMBrush/shBrushM.js?ver=1.1.0' id='syntaxhighlighter-brush-m-js'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.head.appendChild( corecss );
		var themecssurl = "https://bengribaudo.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.head.appendChild( themecss );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['auto-links'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

	// Infinite scroll support
	if ( typeof( jQuery ) !== 'undefined' ) {
		jQuery( function( $ ) {
			$( document.body ).on( 'post-load', function() {
				SyntaxHighlighter.highlight();
			} );
		} );
	}
</script>
<link rel='stylesheet' id='yarppRelatedCss-css' href='https://bengribaudo.com/wp-content/plugins/yet-another-related-posts-plugin/style/related.css?ver=5.30.5' type='text/css' media='all' />
<script type='text/javascript' src='https://bengribaudo.com/wp-includes/js/comment-reply.min.js?ver=6.2.2' id='comment-reply-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/themes/twentytwelve/js/navigation.js?ver=20141205' id='twentytwelve-navigation-js'></script>
<script type='text/javascript' src='https://bengribaudo.com/wp-content/plugins/page-links-to/dist/new-tab.js?ver=3.3.6' id='page-links-to-js'></script>
</body>
</html>
<!-- Dynamic page generated in 0.106 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2023-08-27 01:16:59 -->

<!-- super cache -->